import{_ as y,a as b,b as k,c as M,d as x}from"./OpenApiMainContent.7d8016a9.js";import{a as v,z as w,M as O,b as l,h as i,w as o,e as r,o as a,c,j as n,T as p,N as D,G as L}from"./entry.1ce51ac4.js";import"./nuxt-link.0cc91d56.js";import"./helpers.75b0c43c.js";const j=!0,T=!1,q={name:"openapi-docs",setup(){{const s="data-types",{$openapidoc:d}=w();if(!d.hasAccess(s))throw O({statusCode:404,message:"page not found"})}},async fetch(){try{this.$openapidoc.hasAccess(this.file)||this.$nuxt.context.error({status:404,message:"page not found"})}catch(s){console.error(s)}},created(){this&&this.$fetch&&this.$fetch()},watch:{"$route.meta":{handler:function(s){this.currentLocale=s.locale},deep:!0},$route:{handler:function(s){this.isMobile&&(this.isMenuOpen=!1)},deep:!0}},data(){return{pathsByTags:{"Test with various data types":{name:"Test with various data types",description:"",isOpen:!0,items:[{name:"/nested-object-in-request-body",path:"nested-object-in-request-body",type:"post",description:null},{name:"/nested-object",path:"nested-object",type:"get",description:"Response schema is made up of multiple nested object, For simple schema check out [simple object](#get-/simple-object)"},{name:"/simple-object",path:"simple-object",type:"get",description:"Response schema is a simple object, which contains only primitive properties. For complex schema check out [nested object](#get-/nested-object)"},{name:"/person",path:"person",type:"post",description:"Request-Parameters and Response-Schema contains various data types and constrains. Check out how is it desplayed below"}]}},files:{petstore_extended:"Petstore Extended Api",localization:"Localization","no-access":"no access","additional-props":"additional-props",allof:"allof","arr-of-arr":"arr-of-arr","arrange-by-tags":"arrange-by-tags","array-and-object-nesting":"array-and-object-nesting","auth-test1":"auth-test1",auth:"auth",callback:"callback",circular:"circular","code-highlight":"code-highlight",collapsable:"collapsable","data-types-simple":"data-types-simple","data-types":"data-types","dynamic-form-params":"dynamic-form-params","dynamic-query-params":"dynamic-query-params",events:"events","example-with-nested-refs":"example-with-nested-refs",examples:"examples","file-upload":"file-upload","fill-example-test":"fill-example-test","large-spec":"large-spec",links:"links","markdown-headings":"markdown-headings",markdown:"markdown",mock:"mock","multi-datatypes-test":"multi-datatypes-test","multi-datatypes":"multi-datatypes","multipart-formdata":"multipart-formdata","multiple-oneof":"multiple-oneof","multiple-security-schemes":"multiple-security-schemes","no-server":"no-server","oauth-demo":"oauth-demo","oauth-o365":"oauth-o365","oauth-vendor-extension":"oauth-vendor-extension",oauth:"oauth","oneof-allof-nested":"oneof-allof-nested","oneof-combinations":"oneof-combinations","oneof-with-refs":"oneof-with-refs",oneof:"oneof","open-api-3-1-test":"open-api-3-1-test","open-api-3-1":"open-api-3-1",parameters:"parameters",petstore:"petstore","post-nobody":"post-nobody","request-body-multiple":"request-body-multiple","schema-title-and-descriptions":"schema-title-and-descriptions",schema:"schema","server-override":"server-override",server:"server","toomany-example-generation":"toomany-example-generation",xml:"xml"},path_doc:"docs",locales:{en:"English"},name:"Api Docs",isMenuOpen:!0,isMobile:!1,currentLocale:"en",file:"data-types",isDarkMode:!1}},computed:{footer(){return this.$openapidoc.getFooter()},logo(){return this.$openapidoc.getLogo().replace(":name",this.name)},isVue2(){return T},isVue3(){return j}},methods:{toggleMenu(){this.isMenuOpen=!this.isMenuOpen},toggleDarkMode(){this.isDarkMode=!this.isDarkMode,localStorage.setItem("isDarkMode",this.isDarkMode),this.isDarkMode?document.querySelector("html").classList.add("dark"):document.querySelector("html").classList.remove("dark")},handleResize(){this.isDesktop=window.innerWidth>=639,this.isMobile=window.innerWidth<639,!this.isDesktop&&this.isMenuOpen&&(this.isMenuOpen=!1),this.isDesktop&&(this.isMenuOpen=!0)}},mounted(){this.isMobile=window.innerWidth<639,this.isMenuOpen=window.innerWidth>639,window.addEventListener("resize",this.handleResize),this.isDarkMode=localStorage.getItem("isDarkMode")==="true",this.isDarkMode&&document.querySelector("html").classList.add("dark")},unmounted(){window.removeEventListener("resize",this.handleResize)},beforeDestroy(){window.removeEventListener("resize",this.handleResize)}},z={class:"flex flex-col h-screen dark:bg-gray-900 dark:text-gray-300/75"},A=["innerHTML"],V={slot:"button"},N={class:"flex flex-1 overflow-hidden"},R={key:0},E={key:2,class:"fixed w-full bg-gray-900 py-8"},S=["innerHTML"];function B(s,d,C,H,e,t){const u=M,m=y,h=x,f=b,_=L("Nuxt"),g=k;return a(),l("div",z,[i(m,{isMenuOpen:e.isMenuOpen,onToggleMenu:t.toggleMenu,class:"bg-blue dark:bg-blue"},{logo:o(()=>[r("span",{innerHTML:t.logo},null,8,A)]),default:o(()=>[r("div",V,[i(u,{"current-locale":e.currentLocale,files:e.files,locales:e.locales,file:e.file,path:e.path_doc,"is-dark-mode":e.isDarkMode,onToggleDarkMode:t.toggleDarkMode},null,8,["current-locale","files","locales","file","path","is-dark-mode","onToggleDarkMode"])])]),_:1},8,["isMenuOpen","onToggleMenu"]),r("div",N,[i(f,{isMenuOpen:e.isMenuOpen,isMobile:e.isMobile},{default:o(()=>[i(h,{routes:e.pathsByTags,"current-locale":e.currentLocale,file:e.file,path:e.path_doc,files:e.files,locales:e.locales},null,8,["routes","current-locale","file","path","files","locales"])]),_:1},8,["isMenuOpen","isMobile"]),i(g,{style:{"padding-bottom":"4rem"}},{default:o(()=>[t.isVue2?(a(),c(p,{key:0,name:"fade",tag:"div"},{default:o(()=>[t.isVue2?(a(),c(_,{key:0})):n("",!0)]),_:1})):n("",!0),t.isVue3?(a(),c(p,{key:1,name:"fade",tag:"div"},{default:o(()=>[t.isVue3?(a(),l("div",R,[t.isVue3?D(s.$slots,"default",{key:0}):n("",!0)])):n("",!0)]),_:3})):n("",!0),t.footer?(a(),l("footer",E,[r("div",{class:"container mx-auto flex justify-between bg-gray-100 text-gray-800 border-t border-gray-700 dark:bg-slate dark:text-gray-300/75",innerHTML:t.footer},null,8,S)])):n("",!0)]),_:3})])])}const G=v(q,[["render",B]]);export{G as default};
