import{_ as h,a as y,b as g,c as f,d as b}from"./SearchBlock.43c03cbe.js";import{a as v,f as j,r as p,b as x,c as n,h as w,o as i}from"./entry.7023a70d.js";import"./helpers.75b0c43c.js";import"./nuxt-link.8de9ea58.js";const N={name:"AppDocs",layout:"apidocs-layout-data-types",transition:{name:"fade"},head(){if(this.isInfo)return{title:"[] - Info Docs",description:""};if(this.isComponents)return{title:"[] - Components Docs",description:""};const e=this.activeRoute["x-summary-"]??this.activeRoute.summary??"",a=this.activeRoute["x-description-"]??this.activeRoute.description??"";return{title:"["+this.file+"] - "+e,description:a}},setup(){{const e=j(),a=p(e.params.locale??e.meta.locale),o=p(e.params.type??e.meta.type),s=p(e.params.path??e.meta.path);return{currentLocale:a,type:o,path:s}}},async fetch(){const e=this.$nuxt.context;try{this.currentLocale=e.route.params.locale??e.route.meta[0].locale,this.type=e.route.params.type??e.route.meta[0].type,this.path=e.route.params.path??e.route.meta[0].path}catch(a){console.error(a),console.error(e.route)}},created(){this&&this.$fetch&&this.$fetch()},data(){return{options:{folder:"./docs/openapi",name:"Api Docs",path:"docs",debug:!0,doc:{openapi:"3.0.0",info:{description:"Contains all data types",version:"1.0.0",title:"Testing different data-types"},paths:{"nested-object-in-request-body":{post:{tags:["Test with various data types"],summary:"Request Body accepting a JSON",requestBody:{content:{"application/json":{schema:{type:"object",required:["name","photoUrls"],properties:{primaryEmail:{type:"string",format:"email"},dob:{description:"Date of Birth",type:"string",format:"date"},id:{title:"Unique ID",description:"SSN",allOf:[{type:"string",format:"uuid",title:"schemas"}]},category:{title:"Person Category",description:"Categories this person belongs to",allOf:[{type:"object",properties:{catId:{description:"Category ID",allOf:[{type:"string",format:"uuid",title:"schemas"}]},name:{description:"Category name",type:"string",deprecated:!0}},title:"schemas"}]},country:{type:"object",deprecated:!0,properties:{countryCode:{type:"string"},countryName:{type:"string"}}},dependentIds:{type:"array",deprecated:!0,description:"IDs of Dependents .",items:{type:"integer"},example:[278,279,280,281]},name:{description:"Name of the person",type:"string",minLength:4,examples:{empty:{value:null,summary:"No Name"},"male-name":{value:"James",summary:"Male name"},"female-name":{value:"Ria",summary:"Female Name"},"gender-nutral-name":{value:"Charlie",summary:"Gender Neutral Name"}}},photoUrls:{description:"The list of URL to a cute photos featuring pet",type:"array",maxItems:20,items:{type:"string",format:"url"}},tags:{title:"TAGS",description:"Tags attached to the person",type:"array",minItems:1,items:{type:"object",properties:{id:{description:"Tag ID",allOf:[{type:"string",format:"uuid",title:"schemas"}]},name:{description:"Tag name",type:"string",minLength:1}},title:"schemas"}},maritalStatus:{type:"string",description:"Marital status in case of adult",enum:["married","unmarried","widowed"]},phone:{description:"phone number in international format",type:"string",pattern:"/^&#x5C;+(?:[0-9]-?){6,14}[0-9]$/",example:"+1-202-555-0192",nullable:!0}},title:"schemas"}}}},path:"/nested-object-in-request-body"}},"nested-object":{get:{tags:["Test with various data types"],summary:"Nested object",description:`<p>Response schema is made up of multiple nested object, For simple schema check out <a href="#get-/simple-object">simple object</a></p>
`,responses:{200:{description:"successful operation",content:{"application/json":{schema:{type:"object",description:`<p>Description of <strong>Person</strong> object (Person must be bold)</p>
`,properties:{age:{description:`<p>Person&#39;s <strong>Age</strong> (age must be bold)</p>
`,type:"integer"},fullName:{description:"Person&#x27;s Full name",type:"object",properties:{firstName:{description:"_First name_ (First name should be italics)",type:"string"},lastName:{description:"`Last name` (last name must be monospaced)\n",type:"string"}}},dependentIds:{type:"array",description:"IDs of Dependents .",items:{type:"integer"}},dependentNames:{type:"array",description:`<p>Full Name of <strong>Dependents</strong> (Dependents must be bold).</p>
`,items:{type:"object",properties:{firstNameParts:{description:`<p>Parts of <strong>First Name</strong> (First Name must be bold)</p>
`,type:"object",properties:{firstName:{description:"This is a very very long description to test how will it show up on a API spec renderer tool such as RapiDoc. This lable must be big enough to wrap into next line",type:"string"},aLongFieldForTestingHowItShowsUpInSchemaModelWhenItEncountersLongField:{description:"Dependent Last Name",type:"string"}}},dependentLastName:{description:"Dependent Last Name",type:"string"}}}},hobbies:{type:"array",description:"array of objects",items:{type:"object"}}}}}}}},path:"/nested-object"}},"simple-object":{get:{tags:["Test with various data types"],summary:"Simple object",description:`<p>Response schema is a simple object, which contains only primitive properties. For complex schema check out <a href="#get-/nested-object">nested object</a></p>
`,responses:{200:{description:"successful operation",content:{"application/json":{schema:{type:"object",properties:{name:{description:"Person Name",type:"string"},age:{description:"Person Age",type:"integer",minimum:1,maximum:100}}}}}}},path:"/simple-object"}},person:{post:{tags:["Test with various data types"],summary:"Data Types with constraints",description:"Request-Parameters and Response-Schema contains various data types and constrains. Check out how is it desplayed below",parameters:[{name:"height",in:"query",description:"height (in inches)",required:!0,example:70,schema:{type:"integer",format:"int32",minimum:12,maximum:120}},{name:"full-name",in:"query",description:"Name of a person",required:!0,schema:{type:"string",minimum:3},examples:{empty:{value:null,summary:"No Name"},"male-name":{value:"James",summary:"Male name",description:`<p><code>Lorem ipsum dolor sit amet</code> consectetur adipisicing elit.</p>
<ol>
<li>Animi alias iste</li>
<li>minus iure</li>
<li>assumenda quisquam</li>
<li>qui cum id ab nesciunt</li>
</ol>
<p><em>Impedit voluptatum asperiores obcaecati blanditiis</em> perferendis error repudiandae odit, veniam ab culpa exercitationem eaque,</p>
<blockquote>
<p>repellat <strong>laboriosam sequi dolor doloribus</strong> voluptas</p>
</blockquote>
<p> natus hic fugiat incidunt.</p>
<ul>
<li>laborum odio dolore</li>
<li>corrupti tenetur</li>
<li>nostrum aut sunt,</li>
</ul>
<p>quis vel neque. Vitae maxime aut assumenda ipsum.</p>
`},"female-name":{value:"Ria",summary:"Female Name"},"gender-nutral-name":{value:"Charlie",summary:"Gender Neutral Name"}}},{name:"social-connection",in:"query",description:"facebook, linkedin, github, instagram, twitter etc",schema:{type:"string",format:"url"}},{name:"email",in:"query",required:!0,schema:{type:"string",format:"email"}},{name:"email-password",in:"query",required:!0,schema:{type:"string",format:"password"}},{name:"date-of-birth",in:"query",required:!0,schema:{type:"string",format:"date"}},{name:"phone-deprecated",in:"query","x-fill-example":"no",example:12345,deprecated:!0,schema:{type:"string",pattern:"/^&#x5C;+(?:[0-9]-?){6,14}[0-9]$/"}},{name:"marital-status",in:"query",required:!0,example:"married",schema:{type:"string",enum:["married","unmarried","widowed","unknown"],default:"unknown"}},{name:"interests",in:"query",required:!0,description:"__Exploded Array__ will send separate querystring parameter for each items eg - `interests=computers&interests=movies`",schema:{type:"array",example:["computers","reading",["music","movies"]],minItems:1,maxItems:3,items:{type:"string",enum:["computers","hiking","swiming","movies","music","dancing","reading","painting"],default:"hiking"}}},{name:"tags",in:"query",description:"__Not Exploded Array__ will send a single querystring parameter with comma separated string eg - `tags=tall,dark,handsome`",style:"form",explode:!1,schema:{type:"array",items:{type:"string"}}}],responses:{200:{description:"successful operation",content:{"application/json":{schema:{type:"array",items:{type:"object",required:["name","photoUrls"],properties:{primaryEmail:{type:"string",format:"email"},dob:{description:"Date of Birth",type:"string",format:"date"},id:{title:"Unique ID",description:"SSN",allOf:[{type:"string",format:"uuid",title:"schemas"}]},category:{title:"Person Category",description:"Categories this person belongs to",allOf:[{type:"object",properties:{catId:{description:"Category ID",allOf:[{type:"string",format:"uuid",title:"schemas"}]},name:{description:"Category name",type:"string",deprecated:!0}},title:"schemas"}]},country:{type:"object",deprecated:!0,properties:{countryCode:{type:"string"},countryName:{type:"string"}}},dependentIds:{type:"array",deprecated:!0,description:"IDs of Dependents .",items:{type:"integer"},example:[278,279,280,281]},name:{description:"Name of the person",type:"string",minLength:4,examples:{empty:{value:null,summary:"No Name"},"male-name":{value:"James",summary:"Male name"},"female-name":{value:"Ria",summary:"Female Name"},"gender-nutral-name":{value:"Charlie",summary:"Gender Neutral Name"}}},photoUrls:{description:"The list of URL to a cute photos featuring pet",type:"array",maxItems:20,items:{type:"string",format:"url"}},tags:{title:"TAGS",description:"Tags attached to the person",type:"array",minItems:1,items:{type:"object",properties:{id:{description:"Tag ID",allOf:[{type:"string",format:"uuid",title:"schemas"}]},name:{description:"Tag name",type:"string",minLength:1}},title:"schemas"}},maritalStatus:{type:"string",description:"Marital status in case of adult",enum:["married","unmarried","widowed"]},phone:{description:"phone number in international format",type:"string",pattern:"/^&#x5C;+(?:[0-9]-?){6,14}[0-9]$/",example:"+1-202-555-0192",nullable:!0}},title:"schemas"}}}}}},path:"/person"}}},components:{schemas:{category:{type:"object",properties:{catId:{description:"Category ID",allOf:[{type:"string",format:"uuid",title:"schemas"}]},name:{description:"Category name",type:"string",deprecated:!0}}},id:{type:"string",format:"uuid",title:"schemas"},person:{type:"object",required:["name","photoUrls"],properties:{primaryEmail:{type:"string",format:"email"},dob:{description:"Date of Birth",type:"string",format:"date"},id:{title:"Unique ID",description:"SSN",allOf:[{type:"string",format:"uuid",title:"schemas"}]},category:{title:"Person Category",description:"Categories this person belongs to",allOf:[{type:"object",properties:{catId:{description:"Category ID",allOf:[{type:"string",format:"uuid",title:"schemas"}]},name:{description:"Category name",type:"string",deprecated:!0}},title:"schemas"}]},country:{type:"object",deprecated:!0,properties:{countryCode:{type:"string"},countryName:{type:"string"}}},dependentIds:{type:"array",deprecated:!0,description:"IDs of Dependents .",items:{type:"integer"},example:[278,279,280,281]},name:{description:"Name of the person",type:"string",minLength:4,examples:{empty:{value:null,summary:"No Name"},"male-name":{value:"James",summary:"Male name"},"female-name":{value:"Ria",summary:"Female Name"},"gender-nutral-name":{value:"Charlie",summary:"Gender Neutral Name"}}},photoUrls:{description:"The list of URL to a cute photos featuring pet",type:"array",maxItems:20,items:{type:"string",format:"url"}},tags:{title:"TAGS",description:"Tags attached to the person",type:"array",minItems:1,items:{type:"object",properties:{id:{description:"Tag ID",allOf:[{type:"string",format:"uuid",title:"schemas"}]},name:{description:"Tag name",type:"string",minLength:1}},title:"schemas"}},maritalStatus:{type:"string",description:"Marital status in case of adult",enum:["married","unmarried","widowed"]},phone:{description:"phone number in international format",type:"string",pattern:"/^&#x5C;+(?:[0-9]-?){6,14}[0-9]$/",example:"+1-202-555-0192",nullable:!0}},title:"schemas"},tag:{type:"object",properties:{id:{description:"Tag ID",allOf:[{type:"string",format:"uuid",title:"schemas"}]},name:{description:"Tag name",type:"string",minLength:1}},title:"schemas"}}}},isNuxt3:!0,isNuxt2:!1,locales:{en:"English"},pathsByTags:{"Test with various data types":{name:"Test with various data types",description:"",isOpen:!0,items:[{name:"/nested-object-in-request-body",path:"nested-object-in-request-body",type:"post",description:null},{name:"/nested-object",path:"nested-object",type:"get",description:"Response schema is made up of multiple nested object, For simple schema check out [simple object](#get-/simple-object)"},{name:"/simple-object",path:"simple-object",type:"get",description:"Response schema is a simple object, which contains only primitive properties. For complex schema check out [nested object](#get-/nested-object)"},{name:"/person",path:"person",type:"post",description:"Request-Parameters and Response-Schema contains various data types and constrains. Check out how is it desplayed below"}]}},fileName:"data-types",layoutName:"apidocs-layout-data-types",files:{petstore_extended:"Petstore Extended Api",localization:"Localization","no-access":"no access","additional-props":"additional-props",allof:"allof","arr-of-arr":"arr-of-arr","arrange-by-tags":"arrange-by-tags","array-and-object-nesting":"array-and-object-nesting","auth-test1":"auth-test1",auth:"auth",callback:"callback",circular:"circular","code-highlight":"code-highlight",collapsable:"collapsable","data-types-simple":"data-types-simple","data-types":"data-types","dynamic-form-params":"dynamic-form-params","dynamic-query-params":"dynamic-query-params",events:"events","example-with-nested-refs":"example-with-nested-refs",examples:"examples","file-upload":"file-upload","fill-example-test":"fill-example-test","large-spec":"large-spec",links:"links","markdown-headings":"markdown-headings",markdown:"markdown",mock:"mock","multi-datatypes-test":"multi-datatypes-test","multi-datatypes":"multi-datatypes","multipart-formdata":"multipart-formdata","multiple-oneof":"multiple-oneof","multiple-security-schemes":"multiple-security-schemes","no-server":"no-server","oauth-demo":"oauth-demo","oauth-o365":"oauth-o365","oauth-vendor-extension":"oauth-vendor-extension",oauth:"oauth","oneof-allof-nested":"oneof-allof-nested","oneof-combinations":"oneof-combinations","oneof-with-refs":"oneof-with-refs",oneof:"oneof","open-api-3-1-test":"open-api-3-1-test","open-api-3-1":"open-api-3-1",parameters:"parameters",petstore:"petstore","post-nobody":"post-nobody","request-body-multiple":"request-body-multiple","schema-title-and-descriptions":"schema-title-and-descriptions",schema:"schema","server-override":"server-override",server:"server","toomany-example-generation":"toomany-example-generation",xml:"xml"}},path_doc:"docs",file:"data-types"}},watch:{"$route.meta":{handler:function(e){this.currentLocale=e.locale,this.type=e.type,this.path=e.path},deep:!0}},methods:{downloadYaml(){const e=JSON.stringify(this.doc,null,4),a=new Blob([e],{type:"application/json"}),o=URL.createObjectURL(a),s=document.createElement("a");s.href=o,s.download=this.file+".yaml",document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(o)}},computed:{doc(){return this.options.doc},name(){return this.options.name},isInfo(){return this.path==="info"},isComponents(){return this.path==="components"},activeRoute(){return!this.options.doc.paths||!this.options.doc.paths[this.path]?null:this.options.doc.paths[this.path][this.type]??null},subParams(){return!this.options.doc.paths||!this.options.doc.paths[this.path]?null:this.options.doc.paths[this.path].parameters??null},server(){return this.options.doc.paths&&this.options.doc.paths[this.path]&&this.options.doc.paths[this.path].servers&&this.options.doc.paths[this.path].servers[0]?this.options.doc.paths[this.path].servers[0].url??null:!this.options.doc.servers||!this.options.doc.servers[0]?null:this.options.doc.servers[0].url??null}},mounted(){this.$openapidocBus.$on("downloadYamlDoc",this.downloadYaml)},unmounted(){this.$openapidocBus.$off("downloadYamlDoc",this.downloadYaml)},destroyed(){this.$openapidocBus.$off("downloadYamlDoc",this.downloadYaml)}};function _(e,a,o,s,r,t){const m=h,c=y,l=g,d=b,u=f;return i(),x("div",null,[t.isInfo?(i(),n(m,{key:0,info:t.doc.info,servers:t.doc.servers,"current-locale":e.currentLocale},null,8,["info","servers","current-locale"])):t.isComponents?(i(),n(c,{key:1,components:t.doc.components,"current-locale":e.currentLocale},null,8,["components","current-locale"])):t.activeRoute?(i(),n(l,{key:2,route:t.activeRoute,"current-locale":e.currentLocale,method:e.type,components:t.doc.components,url:e.path,path_doc:r.path_doc,file:r.file,server:t.server,"sub-params":t.subParams},null,8,["route","current-locale","method","components","url","path_doc","file","server","sub-params"])):(i(),n(d,{key:3})),w(u,{"current-locale":e.currentLocale,doc:t.doc,path:r.options.path,file:r.file},null,8,["current-locale","doc","path","file"])])}const C=v(N,[["render",_]]);export{C as default};
