import{_ as m,a as v,b as f,c as j,d as g}from"./SearchBlock.10c805ba.js";import{a as y,f as b,r as l,b as _,c as p,h as x,o}from"./entry.c6e65efe.js";import"./helpers.75b0c43c.js";import"./nuxt-link.bce30875.js";const w={name:"AppDocs",layout:"apidocs-layout-server",transition:{name:"fade"},head(){if(this.isInfo)return{title:"[] - Info Docs",description:""};if(this.isComponents)return{title:"[] - Components Docs",description:""};const s=this.activeRoute["x-summary-"]??this.activeRoute.summary??"",t=this.activeRoute["x-description-"]??this.activeRoute.description??"";return{title:"["+this.file+"] - "+s,description:t}},setup(){{const s=b(),t=l(s.params.locale??s.meta.locale),n=l(s.params.type??s.meta.type),a=l(s.params.path??s.meta.path);return{currentLocale:t,type:n,path:a}}},async fetch(){const s=this.$nuxt.context;try{this.currentLocale=s.route.params.locale??s.route.meta[0].locale,this.type=s.route.params.type??s.route.meta[0].type,this.path=s.route.params.path??s.route.meta[0].path}catch(t){console.error(t),console.error(s.route)}},created(){this&&this.$fetch&&this.$fetch()},data(){return{options:{folder:"./docs/openapi",name:"Api Docs",path:"docs",debug:!0,doc:{openapi:"3.0.2",info:{version:"1.0",title:"API Server templating using variables",description:`<p>Various ways to define API servers in the spec including variables</p>
<pre><code class="hljs language-yaml">  <span class="hljs-attr">servers:</span>
    <span class="hljs-bullet">-</span> <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;http://example.com/api&#x27;</span>
      <span class="hljs-attr">description:</span> <span class="hljs-string">Test</span> <span class="hljs-string">server</span> <span class="hljs-string">(just</span> <span class="hljs-string">for</span> <span class="hljs-string">example)</span>
    <span class="hljs-bullet">-</span> <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;/api&#x27;</span>
    <span class="hljs-bullet">-</span> <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;{protocol}://dev.com/api/{version}&#x27;</span>
      <span class="hljs-attr">variables:</span>
        <span class="hljs-attr">protocol:</span>
          <span class="hljs-attr">description:</span> <span class="hljs-string">Protocol</span> <span class="hljs-string">(with</span> <span class="hljs-string">enum)</span>
          <span class="hljs-attr">default:</span> <span class="hljs-string">https</span>
          <span class="hljs-attr">enum:</span>
            <span class="hljs-bullet">-</span> <span class="hljs-string">http</span>
            <span class="hljs-bullet">-</span> <span class="hljs-string">https</span>
        <span class="hljs-attr">version:</span>
          <span class="hljs-attr">description:</span> <span class="hljs-string">API</span> <span class="hljs-string">Version</span> <span class="hljs-string">(without</span> <span class="hljs-string">enum)</span>
          <span class="hljs-attr">default:</span> <span class="hljs-string">v1</span>
    <span class="hljs-bullet">-</span> <span class="hljs-attr">url:</span> <span class="hljs-string">&#x27;{protocol}://{environment}.example.com/{version}&#x27;</span>
      <span class="hljs-attr">variables:</span>
        <span class="hljs-attr">environment:</span>
          <span class="hljs-attr">default:</span> <span class="hljs-string">api</span>    <span class="hljs-comment"># Production server</span>
          <span class="hljs-attr">description:</span> <span class="hljs-string">&gt;
            Server choices:
            * \`api\` Production (this is the default).
            * \`api.qa\` QA server.
            * \`api.dev\` Development server.
</span>          <span class="hljs-attr">enum:</span>
            <span class="hljs-bullet">-</span> <span class="hljs-string">api</span>      <span class="hljs-comment"># Production server</span>
            <span class="hljs-bullet">-</span> <span class="hljs-string">api.dev</span>  <span class="hljs-comment"># Development server</span>
            <span class="hljs-bullet">-</span> <span class="hljs-string">api.qa</span>   <span class="hljs-comment"># Testing server</span>
        <span class="hljs-attr">protocol:</span>
          <span class="hljs-attr">default:</span> <span class="hljs-string">https</span>
          <span class="hljs-attr">enum:</span>
            <span class="hljs-bullet">-</span> <span class="hljs-string">http</span>
            <span class="hljs-bullet">-</span> <span class="hljs-string">https</span>
        <span class="hljs-attr">version:</span>
          <span class="hljs-attr">default:</span> <span class="hljs-string">v2</span>
          <span class="hljs-attr">enum:</span>
            <span class="hljs-bullet">-</span> <span class="hljs-string">v1</span>
            <span class="hljs-bullet">-</span> <span class="hljs-string">v2</span>
</code></pre>
`},servers:[{url:"http://example.com/api",description:"Test server (just for example)"},{url:"{protocol}://dev.com/api/{version}",variables:{protocol:{description:"Protocol (with enum)",default:"https",enum:["http","https"]},version:{description:"API Version (without enum)",default:"v1"}}},{url:"{protocol}://{environment}.example.com/{version}",variables:{environment:{default:"api",description:"Server choices:\n * `api` Production (this is the default).\n * `api.qa` QA server.\n * `api.dev` Development server.\n",enum:["api","api.dev","api.qa"]},protocol:{default:"https",enum:["http","https"]},version:{default:"v2",enum:["v1","v2"]}}}],paths:{"api-server-template":{get:{summary:"Dynamic API Server.",description:"Uses API server template string and variables which can be used to generatea a desired API server url -  The selected and computed API Server URL should be shown against `API SERVER`.",responses:{200:{description:"successful operation",content:{"application/json":{schema:{type:"object",properties:{name:{description:"Person Name",type:"string"},age:{description:"Person Age",type:"integer"}}}}}}},path:"/api-server-template",tags:["other"]}}}},isNuxt3:!0,isNuxt2:!1,locales:{en:"English"},pathsByTags:{other:{name:"other",description:"",isOpen:!0,items:[{name:"/api-server-template",path:"api-server-template",type:"get",description:"Uses API server template string and variables which can be used to generatea a desired API server url -  The selected and computed API Server URL should be shown against `API SERVER`."}]}},fileName:"server",layoutName:"apidocs-layout-server",files:{petstore_extended:"Petstore Extended Api",localization:"Localization","no-access":"no access","additional-props":"additional-props",allof:"allof","arr-of-arr":"arr-of-arr","arrange-by-tags":"arrange-by-tags","array-and-object-nesting":"array-and-object-nesting","auth-test1":"auth-test1",auth:"auth",callback:"callback",circular:"circular","code-highlight":"code-highlight",collapsable:"collapsable","data-types-simple":"data-types-simple","data-types":"data-types","dynamic-form-params":"dynamic-form-params","dynamic-query-params":"dynamic-query-params",events:"events","example-with-nested-refs":"example-with-nested-refs",examples:"examples","file-upload":"file-upload","fill-example-test":"fill-example-test","large-spec":"large-spec",links:"links","markdown-headings":"markdown-headings",markdown:"markdown",mock:"mock","multi-datatypes-test":"multi-datatypes-test","multi-datatypes":"multi-datatypes","multipart-formdata":"multipart-formdata","multiple-oneof":"multiple-oneof","multiple-security-schemes":"multiple-security-schemes","no-server":"no-server","oauth-demo":"oauth-demo","oauth-o365":"oauth-o365","oauth-vendor-extension":"oauth-vendor-extension",oauth:"oauth","oneof-allof-nested":"oneof-allof-nested","oneof-combinations":"oneof-combinations","oneof-with-refs":"oneof-with-refs",oneof:"oneof","open-api-3-1-test":"open-api-3-1-test","open-api-3-1":"open-api-3-1",parameters:"parameters",petstore:"petstore","post-nobody":"post-nobody","request-body-multiple":"request-body-multiple","schema-title-and-descriptions":"schema-title-and-descriptions",schema:"schema","server-override":"server-override",server:"server","toomany-example-generation":"toomany-example-generation",xml:"xml"}},path_doc:"docs",file:"server"}},watch:{"$route.meta":{handler:function(s){this.currentLocale=s.locale,this.type=s.type,this.path=s.path},deep:!0}},methods:{downloadYaml(){const s=JSON.stringify(this.doc,null,4),t=new Blob([s],{type:"application/json"}),n=URL.createObjectURL(t),a=document.createElement("a");a.href=n,a.download=this.file+".yaml",document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(n)}},computed:{doc(){return this.options.doc},name(){return this.options.name},isInfo(){return this.path==="info"},isComponents(){return this.path==="components"},activeRoute(){return!this.options.doc.paths||!this.options.doc.paths[this.path]?null:this.options.doc.paths[this.path][this.type]??null},subParams(){return!this.options.doc.paths||!this.options.doc.paths[this.path]?null:this.options.doc.paths[this.path].parameters??null},server(){return this.options.doc.paths&&this.options.doc.paths[this.path]&&this.options.doc.paths[this.path].servers&&this.options.doc.paths[this.path].servers[0]?this.options.doc.paths[this.path].servers[0].url??null:!this.options.doc.servers||!this.options.doc.servers[0]?null:this.options.doc.servers[0].url??null}},mounted(){this.$openapidocBus.$on("downloadYamlDoc",this.downloadYaml)},unmounted(){this.$openapidocBus.$off("downloadYamlDoc",this.downloadYaml)},destroyed(){this.$openapidocBus.$off("downloadYamlDoc",this.downloadYaml)}};function P(s,t,n,a,r,e){const i=m,c=v,h=f,u=g,d=j;return o(),_("div",null,[e.isInfo?(o(),p(i,{key:0,info:e.doc.info,servers:e.doc.servers,"current-locale":s.currentLocale},null,8,["info","servers","current-locale"])):e.isComponents?(o(),p(c,{key:1,components:e.doc.components,"current-locale":s.currentLocale},null,8,["components","current-locale"])):e.activeRoute?(o(),p(h,{key:2,route:e.activeRoute,"current-locale":s.currentLocale,method:s.type,components:e.doc.components,url:s.path,path_doc:r.path_doc,file:r.file,server:e.server,"sub-params":e.subParams},null,8,["route","current-locale","method","components","url","path_doc","file","server","sub-params"])):(o(),p(u,{key:3})),x(d,{"current-locale":s.currentLocale,doc:e.doc,path:r.options.path,file:r.file},null,8,["current-locale","doc","path","file"])])}const L=y(w,[["render",P]]);export{L as default};
