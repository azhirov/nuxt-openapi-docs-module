{"version":3,"file":"5.js","sources":["webpack:///../components/lib/CodeView.vue?f244","webpack:///../components/lib/CodeView.vue?b982","webpack:///../components/lib/CustomDropdownWithSubMenu.vue?61af","webpack:///../components/lib/CustomDropdownWithSubMenu.vue?4fa6","webpack:///../components/lib/CodeSimples.vue?8743","webpack:///../components/lib/CodeSimples.vue?12e6","webpack:///../components/lib/CodeSimples.vue","webpack:///../components/lib/CodeView.vue","webpack:///../components/lib/CodeView.vue?be25","webpack:///../components/lib/CodeView.vue?a78d","webpack:///../components/lib/CustomDropdownWithSubMenu.vue","webpack:///../components/lib/CustomDropdownWithSubMenu.vue?8c1f","webpack:///../components/lib/CustomDropdownWithSubMenu.vue?c870","webpack:///../components/lib/CodeGenerator/Stippets/_CodeGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/JavaScriptXMLHttpRequestGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/JavaScriptAxiosGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/JavaScriptFetchGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/JavaScriptJQueryGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/ShellCurlGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/ShellHttpieGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/ShellWgetGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/Python3Generator.js","webpack:///../components/lib/CodeGenerator/Stippets/PythonRequestsGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/GoGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/CGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/OcamlGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/CSharpHttpclientGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/CSharpRestSharpGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/JavaAsyncHttpClientGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/JavaNetHttpClientGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/JavaOkHttpGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/HttpUrlStringGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/JavaUnirestGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/ClojureHttpGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/KotlinGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/PhpCurlGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/PhpGuzzleGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/PowerShellWebRequestGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/PowerShellRestMethodGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/RGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/RubyGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/RustGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/SwiftGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/BrainfuckGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/ArduinoGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/PhpHttp1Generator.js","webpack:///../components/lib/CodeGenerator/Stippets/PhpHttp2Generator.js","webpack:///../components/lib/CodeGenerator/Stippets/JavaScriptTypescriptGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/ObjectCGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/CppGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/DartGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/ScalaGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/LuaGenerator.js","webpack:///../components/lib/CodeGenerator/Stippets/PerlGenerator.js","webpack:///../components/lib/CodeGenerator/index.js","webpack:///../components/lib/CodeSimples.vue?48b2","webpack:///../components/lib/CodeSimples.vue?ac19","webpack:///../components/lib/CodeView.vue?2225","webpack:///../components/lib/CustomDropdownWithSubMenu.vue?b209","webpack:///../components/lib/CodeSimples.vue?f0d7"],"sourcesContent":["export * from \"-!../../example/node_modules/vue-style-loader/index.js??ref--3-oneOf-1-0!../../example/node_modules/css-loader/dist/cjs.js??ref--3-oneOf-1-1!../../example/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../example/node_modules/postcss-loader/dist/cjs.js??ref--3-oneOf-1-2!../../example/node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../example/node_modules/vue-loader/lib/index.js??vue-loader-options!./CodeView.vue?vue&type=style&index=0&id=8d539996&prod&lang=css&\"","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../example/node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}/*!\\n  Theme: Tokyo-night-Dark\\n  origin: https://github.com/enkia/tokyo-night-vscode-theme\\n  Description: Original highlight.js style\\n  Author: (c) Henri Vandersleyen <hvandersleyen@gmail.com>\\n  License: see project LICENSE\\n  Touched: 2022\\n*/.hljs-comment,.hljs-meta{color:#565f89}.hljs-deletion,.hljs-doctag,.hljs-regexp,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-id,.hljs-selector-pseudo,.hljs-tag,.hljs-template-tag,.hljs-variable.language_{color:#f7768e}.hljs-link,.hljs-literal,.hljs-number,.hljs-params,.hljs-template-variable,.hljs-type,.hljs-variable{color:#ff9e64}.hljs-attribute,.hljs-built_in{color:#e0af68}.hljs-keyword,.hljs-property,.hljs-subst,.hljs-title,.hljs-title.class_,.hljs-title.class_.inherited__,.hljs-title.function_{color:#7dcfff}.hljs-selector-tag{color:#73daca}.hljs-addition,.hljs-bullet,.hljs-quote,.hljs-string,.hljs-symbol{color:#9ece6a}.hljs-code,.hljs-formula,.hljs-section{color:#7aa2f7}.hljs-attr,.hljs-char.escape_,.hljs-keyword,.hljs-name,.hljs-operator{color:#bb9af7}.hljs-punctuation{color:#c0caf5}.hljs{background:#1a1b26;color:#9aa5ce}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}:not(pre)>code[class*=language-],pre[class*=language-]{background:#001529;color:#d3d3d3}.toolbar-btn{background-color:#00a2fb;border:none;color:#fff;cursor:pointer;font-size:12px;margin:0 2px;min-width:50px;padding:4px;right:10px;top:10px;z-index:99}\", \"\"]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {};\nmodule.exports = ___CSS_LOADER_EXPORT___;\n","export * from \"-!../../example/node_modules/vue-style-loader/index.js??ref--3-oneOf-1-0!../../example/node_modules/css-loader/dist/cjs.js??ref--3-oneOf-1-1!../../example/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../example/node_modules/postcss-loader/dist/cjs.js??ref--3-oneOf-1-2!../../example/node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../example/node_modules/vue-loader/lib/index.js??vue-loader-options!./CustomDropdownWithSubMenu.vue?vue&type=style&index=0&id=2fc26aab&prod&scoped=true&lang=css&\"","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../example/node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"button[data-v-2fc26aab]:focus-visible{outline:2px solid rgba(156,163,175,var(--tw-text-opacity));outline-offset:2px}ul[role=menu][data-v-2fc26aab]{z-index:20}.dropdown-enter-active[data-v-2fc26aab],.dropdown-leave-active[data-v-2fc26aab]{transition:opacity .2s ease,transform .2s ease}.dropdown-enter[data-v-2fc26aab],.dropdown-enter-active[data-v-2fc26aab],.dropdown-leave-active[data-v-2fc26aab],.dropdown-leave-to[data-v-2fc26aab]{opacity:0;transform:translateY(-.5rem) scale(.98)}.dropdown-list[data-v-2fc26aab]{max-height:300px;overflow-x:auto}.sub-menu[data-v-2fc26aab]{margin:0}.menu-item[data-v-2fc26aab]{border:1px solid #eaeaea;cursor:pointer}.sub-menu-item[data-v-2fc26aab]{background-color:#f6f6f6;cursor:pointer}.sub-menu-item[data-v-2fc26aab]:hover{background-color:#e8e8e8}@media (max-width:639px){.dropdown-enter-active[data-v-2fc26aab],.dropdown-leave-active[data-v-2fc26aab]{transition:opacity .2s ease-out,transform .2s ease-out}.dropdown-enter[data-v-2fc26aab],.dropdown-leave-to[data-v-2fc26aab]{opacity:0;transform:translateY(-20px)}.dropdown-leave-active[data-v-2fc26aab]{position:absolute;width:100%}.dropdown-list[data-v-2fc26aab]{background-color:#fff;bottom:0;left:0;position:absolute;right:0;top:0;z-index:-1}}\", \"\"]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {};\nmodule.exports = ___CSS_LOADER_EXPORT___;\n","export * from \"-!../../example/node_modules/vue-style-loader/index.js??ref--3-oneOf-1-0!../../example/node_modules/css-loader/dist/cjs.js??ref--3-oneOf-1-1!../../example/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../example/node_modules/postcss-loader/dist/cjs.js??ref--3-oneOf-1-2!../../example/node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../example/node_modules/vue-loader/lib/index.js??vue-loader-options!./CodeSimples.vue?vue&type=style&index=0&id=f8cd87ea&prod&lang=css&\"","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../example/node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"pre{background-color:#f7f7f7;border-radius:5px;overflow-x:auto;padding:10px}code,pre{font-family:monospace}.keyword{color:#0077c2;font-weight:700}.operator{color:#a90d91}.string{color:#2a9d8f}.punctuation{color:#a90d91}\", \"\"]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {};\nmodule.exports = ___CSS_LOADER_EXPORT___;\n","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"col regular-font request-panel code-simple\"},[_c('CustomDropdownWithSubMenu',{attrs:{\"items\":_vm.configs},on:{\"select\":_vm.onLangClick}}),_vm._ssrNode(\" \"),_c('CodeView',{attrs:{\"lang\":_vm.snippet,\"code\":_vm.code}})],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"code-panel\"},[_vm._ssrNode(\"<div class=\\\"code-panel-body relative\\\"><button class=\\\"toolbar-btn absolute top-2 right-2\\\">Copy</button> <pre\"+(_vm._ssrClass(\"language line-numbers\",`language-${_vm.lang}`))+\"><code class=\\\"language\\\">\"+(_vm._s(_vm.html))+\"</code></pre></div>\")])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../example/node_modules/babel-loader/lib/index.js??ref--2-0!../../example/node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../example/node_modules/vue-loader/lib/index.js??vue-loader-options!./CodeView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../example/node_modules/babel-loader/lib/index.js??ref--2-0!../../example/node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../example/node_modules/vue-loader/lib/index.js??vue-loader-options!./CodeView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./CodeView.vue?vue&type=template&id=8d539996&\"\nimport script from \"./CodeView.vue?vue&type=script&lang=js&\"\nexport * from \"./CodeView.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./CodeView.vue?vue&type=style&index=0&id=8d539996&prod&lang=css&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../example/node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"7d888495\"\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"relative\"},[_vm._ssrNode(\"<button type=\\\"button\\\" aria-haspopup=\\\"true\\\"\"+(_vm._ssrAttr(\"aria-expanded\",_vm.isOpen))+\" class=\\\"inline-flex justify-center items-center w-full rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:bg-black dark:text-gray-300/75\\\" data-v-2fc26aab><b data-v-2fc26aab>\"+_vm._ssrEscape(_vm._s(_vm.selectedText ? _vm.selectedText : 'Select Library'))+\"</b> <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\" aria-hidden=\\\"true\\\"\"+(_vm._ssrClass(\"-mr-1 ml-2 h-5 w-5\",_vm.isOpen ? '-rotate-180' : 'rotate-0'))+\" data-v-2fc26aab><path fill-rule=\\\"evenodd\\\" d=\\\"M5.293 7.707a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 011.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\\\" clip-rule=\\\"evenodd\\\" data-v-2fc26aab></path></svg></button> \"),_c('transition',{attrs:{\"name\":\"dropdown\"}},[(_vm.isOpen)?_c('ul',{staticClass:\"dropdown-list origin-top-right absolute left-0 mt-2 ml-0 w-56 rounded-md shadow-lg bg-white dark:bg-black dark:text-gray-300/75 ring-1 ring-black ring-opacity-5 focus:outline-none\",attrs:{\"role\":\"menu\",\"aria-orientation\":\"vertical\",\"aria-labelledby\":\"options-menu\"}},_vm._l((_vm.items),function(item,index){return _c('li',{key:index,staticClass:\"border block px-4 py-2 m-0 text-sm text-gray-700 hover:bg-white hover:text-gray-800 dark:bg-black dark:hover:bg-gray-800 dark:text-gray-300/75\",attrs:{\"role\":\"menuitem\"},on:{\"click\":function($event){return _vm.handleItemClick(item, index)}}},[(item.libraries)?[_c('div',{staticClass:\"flex justify-between cursor-pointer\"},[_c('span',{staticClass:\"flex flex-grow\"},[_vm._v(_vm._s(item.snippet))]),_vm._v(\" \"),_c('span',{staticClass:\"flex flex-grow\",staticStyle:{\"justify-content\":\"end\"}},[_c('svg',{staticClass:\"h-4 w-4 ml-2 self-center\",staticStyle:{\"display\":\"initial\"},attrs:{\"viewBox\":\"0 0 20 20\",\"fill\":\"currentColor\"}},[_c('path',{attrs:{\"fill-rule\":\"evenodd\",\"d\":\"M5.293 7.293a1 1 0 011.414 0L10 10.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\",\"clip-rule\":\"evenodd\"}})])])]),_vm._v(\" \"),(_vm.selectedSnippet === index)?_c('ul',{staticClass:\"sub-menu\"},_vm._l((item.libraries),function(library,libraryKey){return _c('li',{key:libraryKey,staticClass:\"bg-gray-100 hover:bg-gray-200 dark:bg-black dark:hover:bg-gray-800 dark:text-gray-300/75 block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900\",on:{\"click\":function($event){return _vm.handleItemClick(item, index, libraryKey)}}},[_vm._v(\"\\n              \"+_vm._s(library)+\"\\n            \")])}),0):_vm._e()]:[_vm._v(\"\\n          \"+_vm._s(item.snippet)+\"\\n        \")]],2)}),0):_vm._e()])],2)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../example/node_modules/babel-loader/lib/index.js??ref--2-0!../../example/node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../example/node_modules/vue-loader/lib/index.js??vue-loader-options!./CustomDropdownWithSubMenu.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../example/node_modules/babel-loader/lib/index.js??ref--2-0!../../example/node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../example/node_modules/vue-loader/lib/index.js??vue-loader-options!./CustomDropdownWithSubMenu.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./CustomDropdownWithSubMenu.vue?vue&type=template&id=2fc26aab&scoped=true&\"\nimport script from \"./CustomDropdownWithSubMenu.vue?vue&type=script&lang=js&\"\nexport * from \"./CustomDropdownWithSubMenu.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./CustomDropdownWithSubMenu.vue?vue&type=style&index=0&id=2fc26aab&prod&scoped=true&lang=css&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../example/node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  \"2fc26aab\",\n  \"641ebc78\"\n  \n)\n\nexport default component.exports","/**\n *\n * generateHeaderFile(url) - генерация заголовка запроса;\n * generateFooterFile(url) - генерация завершения запроса;\n * generateMimeTypeHeader() - генерация заголовка типа контента;\n * generateHeaders() - генерация заголовков запроса;\n * generateQueryParams() - генерация параметров запроса в строке запроса;\n * generateJsonPostData() - генерация тела POST-запроса в формате JSON;\n * generateMultipartPostData() - генерация тела POST-запроса в формате multipart/form-data;\n * generateOtherPostData() - генерация тела POST-запроса в других форматах;\n * generateCookie() - генерация заголовка Cookie.\n *\n */\nclass CodeGenerator {\n  baseUrl;\n  url;\n  method;\n  params;\n  mimeType;\n  constructor(data) {\n    this.baseUrl = data.baseUrl;\n    this.url = data.url;\n    this.method = data.method;\n    this.params = data.params;\n    this.mimeType = data.mimeType;\n  }\n\n  generateCode() {\n    let url = this.url;\n\n    this.params\n      .filter(param => param.in === 'path')\n      .forEach(param => {\n        url = url.replace(`{${param.name}}`, param.value)\n      });\n\n    let fetchCode = this.generateHeaderFile(url);\n\n    if (this.hasCookieParams()) {\n      fetchCode += this.generateCookie();\n    }\n\n    if (this.hasMimeType()) {\n      fetchCode += this.generateMimeTypeHeader();\n    }\n\n    if (this.hasHeadersParams()) {\n      fetchCode += this.generateHeaders();\n    }\n\n    if (this.hasQueryParams()) {\n      fetchCode += this.generateQueryParams();\n    } else if (this.hasPostDataParams()) {\n      if (this.mimeType === 'application/json') {\n        fetchCode += this.generateJsonPostData();\n      } else if (this.mimeType === 'multipart/form-data') {\n        fetchCode += this.generateMultipartPostData()\n      } else {\n        fetchCode += this.generateOtherPostData()\n      }\n    }\n\n    fetchCode += this.generateFooterFile(url);\n\n    return fetchCode;\n  }\n\n  hasMimeType() {\n    return !!this.mimeType;\n  }\n  hasHeadersParams() {\n    return this.params.some(param => param.in === 'headers');\n  }\n  hasQueryParams() {\n    return this.params.some(param => param.in === 'query');\n  }\n  hasPostDataParams() {\n    return this.params.some(param => param.in === 'postData');\n  }\n  hasCookieParams() {\n    return this.params.some(param => param.in === 'cookie');\n  }\n\n  getHost() {\n    return this.params.some(param => param.in === 'cookie');\n  }\n  generateHeaderFile(url) {};\n  generateFooterFile(url) {};\n  generateMimeTypeHeader() {};\n  generateHeaders() {};\n  generateQueryParams() {};\n  generateJsonPostData() {};\n  generateMultipartPostData() {};\n  generateOtherPostData() {};\n  generateCookie() {};\n}\n\nexport default CodeGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass JavaScriptXMLHttpRequestGenerator extends CodeGenerator {\n  generateCookie() {\n    let cookieHeader = '';\n\n    this.params\n      .filter(param => param.in === 'cookie')\n      .forEach(param => {\n        cookieHeader += `${param.value}; `;\n      });\n\n    if (cookieHeader !== '') {\n      cookieHeader = `xhr.setRequestHeader('Cookie', '${cookieHeader}');\\n`;\n    }\n\n    return cookieHeader;\n  }\n  generateHeaderFile(url) {\n\n    let queryParams = '';\n\n    this.params\n      .filter(param => param.in === 'query')\n      .forEach(param => {\n        queryParams += `${param.name}=${param.value}&`;\n      });\n\n    if (queryParams !== '') {\n      return `var xhr = new XMLHttpRequest();\\nxhr.open('${this.method}', '${this.baseUrl}${this.url}?${queryParams.slice(0, -1)}');\\n`;\n    } else {\n      return `var xhr = new XMLHttpRequest();\\nxhr.open('${this.method}', '${this.baseUrl}${url}');\\n`;\n    }\n  }\n\n  generateFooterFile(url) {\n    return `xhr.send();\\n`;\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === 'application/json') {\n      return `xhr.setRequestHeader('Content-Type', 'application/json');\\n`;\n    } else if (this.mimeType === 'multipart/form-data') {\n      return 'Not supported in XmlHttpRequest';\n    } else {\n      return '';\n    }\n  }\n\n  generateHeaders() {\n    let headers = '';\n\n    this.params\n      .filter(param => param.in === 'headers')\n      .forEach(param => {\n        headers += `xhr.setRequestHeader('${param.name}', '${param.value}');\\n`;\n      });\n\n    return headers;\n  }\n\n  generateQueryParams() {\n\n\n    return '';\n  }\n\n  generateJsonPostData() {\n    let postData = JSON.stringify(this.params.filter(param => param.in === 'postData').reduce((obj, param) => {\n      obj[param.name] = param.value;\n      return obj;\n    }, {}));\n\n    return `xhr.send('${postData}');\\n`;\n  }\n\n  generateMultipartPostData() {\n// Not supported in XmlHttpRequest\n    return 'Not supported in XmlHttpRequest';\n  }\n\n  generateOtherPostData() {\n    let postData = '';\n\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        postData += `${param.name}=${param.value}&`;\n      });\n\n    postData = postData.slice(0, -1);\n\n    return `xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\\nxhr.send('${postData}');\\n`;\n  }\n}\nexport default JavaScriptXMLHttpRequestGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass JavaScriptAxiosGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `axios.${this.method.toLowerCase()}('${this.baseUrl}${url}', `;\n  }\n\n  generateFooterFile(url) {\n    return `)`;\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === 'application/json') {\n      return `headers: {         'Content-Type': 'application/json'       }, `;\n    } else if (this.mimeType === 'multipart/form-data') {\n      return `headers: {         'Content-Type': 'multipart/form-data'       }, `;\n    } else {\n      return '';\n    }\n  }\n\n  generateHeaders() {\n    let headers = `headers: {`;\n\n    this.params\n      .filter(param => param.in === 'headers')\n      .forEach(param => {\n        headers += `${param.name}: '${param.value}', `;\n      });\n\n    headers += `}, `;\n\n    return headers;\n  }\n\n  generateQueryParams() {\n    let queryParams = `params: {`;\n\n    this.params\n      .filter(param => param.in === 'query')\n      .forEach(param => {\n        queryParams += `${param.name}: '${param.value}', `;\n      });\n\n    queryParams += `}, `;\n\n    return queryParams;\n  }\n\n  generateJsonPostData() {\n    let postData = `data: {`;\n\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        postData += `${param.name}: ${JSON.stringify(param.value)}, `;\n      });\n\n    postData += `}, `;\n\n    return postData;\n  }\n\n  generateMultipartPostData() {\n    let formData = `data: new FormData(), `;\n\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        formData += `formData.append('${param.name}', ${JSON.stringify(param.value)}); `;\n      });\n\n    return formData;\n  }\n\n  generateOtherPostData() {\n    let postData = `data: {`;\n\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        postData += `${param.name}: '${param.value}', `;\n      });\n\n    postData += `}, `;\n\n    return postData;\n  }\n\n  generateCookie() {\n    let cookieHeader = '';\n\n    this.params\n      .filter(param => param.in === 'cookie')\n      .forEach(param => {\n        cookieHeader += `${param.value}; `;\n      });\n\n    if (cookieHeader !== '') {\n      cookieHeader = `headers: { Cookie: '${cookieHeader}' }, `;\n    }\n\n    return cookieHeader;\n  }\n}\nexport default JavaScriptAxiosGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass JavaScriptFetchGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `fetch('${this.baseUrl}${url}', {\\n\\tmethod: '${this.method}',\\n`;\n  }\n  generateHeaders() {\n    const headersParams = this.params.filter(param => param.in === 'headers');\n    const headers = headersParams.reduce((acc, cur) => ({ ...acc, [cur.name]: cur.value }), {});\n    return `\\theaders: ${JSON.stringify(headers)},\\n`;\n  }\n\n  generateMimeTypeHeader() {\n    return `\\theaders: { 'Content-Type': '${this.mimeType}' },\\n`;\n  }\n\n  generateJsonPostData() {\n    const postDataParams = this.params.filter(param => param.in === 'postData');\n    const postData = JSON.stringify(postDataParams.reduce((acc, cur) => ({...acc, [cur.name]: cur.value}), {}));\n    return `\\tbody: JSON.stringify(${postData}),\\n`;\n  }\n\n  generateMultipartPostData() {\n    const postDataParams = this.params.filter(param => param.in === 'postData');\n    const formDataCode = postDataParams.map(param => ['${param.name}', '${param.value}']).join(',');\n    return `\\tbody: new FormData([${formDataCode}]),\\n`;\n  }\n\n  generateOtherPostData() {\n    const postDataParams = this.params.filter(param => param.in === 'postData');\n    const postData = postDataParams.map(param => `${param.name}=${param.value}`).join('&');\n    return `\\tbody: '${postData}'\\n`;\n  }\n  generateQueryParams() {\n    const queryParams = this.params.filter(param => param.in === 'query');\n    const queryString = queryParams\n      .map(param => `${param.name}=${param.value}`)\n      .join('&');\n    return `\\tbody: '${queryString}'\\n`;\n  }\n\n  generateFooterFile() {\n    return `})`\n  }\n\n  generateCookie() {\n    let cookieHeader = '';\n\n    this.params\n      .filter(param => param.in === 'cookie')\n      .forEach(param => {\n        cookieHeader += `${param.value}; `;\n      });\n\n    if (cookieHeader !== '') {\n      cookieHeader = `\\theaders: { Cookie: '${cookieHeader}' },\\n`;\n    }\n\n    return cookieHeader;\n  }\n}\n\nexport default JavaScriptFetchGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass JavaScriptJQueryGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `$.ajax({\\n       url: '${this.baseUrl}${url}',\\n       type: '${this.method}',\\n     `;\n  }\n\n  generateFooterFile(url) {\n    return `});`;\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === 'application/json') {\n      return `contentType: 'application/json', \\n`;\n    } else if (this.mimeType === 'multipart/form-data') {\n      return `contentType: false,\\n       processData: false, \\n`;\n    } else {\n      return '';\n    }\n  }\n\n  generateHeaders() {\n    let headers = `headers: {\\n`;\n\n    this.params\n      .filter(param => param.in === 'headers')\n      .forEach(param => {\n        headers += `${param.name}: '${param.value}', \\n`;\n      });\n\n    headers += `}, \\n`;\n\n    return headers;\n  }\n\n  generateQueryParams() {\n    let queryParams = `data: {\\n`;\n\n    this.params\n      .filter(param => param.in === 'query')\n      .forEach(param => {\n        queryParams += `${param.name}: '${param.value}', `;\n      });\n\n    queryParams += `}, \\n`;\n\n    return queryParams;\n  }\n\n  generateJsonPostData() {\n    let postData = `data: JSON.stringify({\\n`;\n\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        postData += `${param.name}: ${JSON.stringify(param.value)}, \\n`;\n      });\n\n    postData += `}), \\n`;\n\n    return postData;\n  }\n\n  generateMultipartPostData() {\n    let formData = `data: new FormData(), \\n`;\n\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        formData += `formData.append('${param.name}', ${JSON.stringify(param.value)}); \\n`;\n      });\n\n    return formData;\n  }\n\n  generateOtherPostData() {\n    let postData = `data: {\\n`;\n\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        postData += `${param.name}: '${param.value}', \\n`;\n      });\n\n    postData += `}, \\n`;\n\n    return postData;\n  }\n\n  generateCookie() {\n    let cookieHeader = '';\n\n    this.params\n      .filter(param => param.in === 'cookie')\n      .forEach(param => {\n        cookieHeader += `${param.value}; \\n`;\n      });\n\n    if (cookieHeader !== '') {\n      cookieHeader = `headers: { Cookie: '${cookieHeader}' }, \\n`;\n    }\n\n    return cookieHeader;\n  }\n\n}\n\nexport default JavaScriptJQueryGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nexport class ShellCurlGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `curl -X ${this.method} \"${this.baseUrl}${url}\"`;\n  }\n\n  generateFooterFile(url) {\n    return '\\n';\n  }\n\n  generateMimeTypeHeader() {\n    return `-H \"Content-Type: ${this.mimeType}\" `;\n  }\n\n  generateHeaders() {\n    let headersCode = '';\n    this.params\n      .filter(param => param.in === 'headers')\n      .forEach(param => {\n        headersCode += `-H \"${param.name}: ${param.value}\" `;\n      });\n    return headersCode;\n  }\n\n  generateQueryParams() {\n    let queryParamsCode = '';\n    this.params\n      .filter(param => param.in === 'query')\n      .forEach(param => {\n        queryParamsCode += `${param.name}=${param.value}&`;\n      });\n    return `-G -d \"${queryParamsCode.slice(0, -1)}\" `;\n  }\n\n  generateJsonPostData() {\n    let postDataCode = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        postDataCode += `\"${param.name}\": \"${param.value}\", `;\n      });\n    postDataCode = postDataCode.slice(0, -2);\n    return `-d '{${postDataCode}}' `;\n  }\n\n  generateMultipartPostData() {\n    let postDataCode = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        if (param.type === 'file') {\n          postDataCode += `-F \"${param.name}=@${param.path}\" `;\n        } else {\n          postDataCode += `-F \"${param.name}=${param.value}\" `;\n        }\n      });\n    return postDataCode;\n  }\n\n  generateOtherPostData() {\n    let postDataCode = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        postDataCode += `${param.name}=${param.value}&`;\n      });\n    return `-d \"${postDataCode.slice(0, -1)}\" `;\n  }\n\n  generateCookie() {\n    const cookieParams = this.params.filter(param => param.in === 'cookie');\n    let cookieCode = '';\n    cookieParams.forEach(param => {\n      cookieCode += `-H \"Cookie: ${param.name}=${param.value};\" `;\n    });\n    return cookieCode;\n  }\n}\n\nexport default ShellCurlGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nexport class ShellHttpieGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `http ${this.method} ${this.baseUrl}${url}`;\n  }\n\n  generateFooterFile(url) {\n    return '';\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === 'application/json') {\n      return '--json';\n    } else if (this.mimeType === 'multipart/form-data') {\n      return '--form';\n    } else {\n      return '';\n    }\n  }\n\n  generateHeaders() {\n    const headers = this.params.filter(param => param.in === 'headers');\n    return headers.map(header => `${header.name}:${header.value}`).join(' ');\n  }\n\n  generateQueryParams() {\n    const queryParams = this.params.filter(param => param.in === 'query');\n    return queryParams.map(queryParam => `${queryParam.name}=${queryParam.value}`).join(' ');\n  }\n\n  generateJsonPostData() {\n    const postData = this.params.filter(param => param.in === 'postData');\n    const jsonObj = postData.reduce((acc, curr) => {\n      acc[curr.name] = curr.value;\n      return acc;\n    }, {});\n    return JSON.stringify(jsonObj);\n  }\n\n  generateMultipartPostData() {\n    const postData = this.params.filter(param => param.in === 'postData');\n    const files = postData.filter(param => param.type === 'file');\n    const formData = postData.filter(param => param.type !== 'file');\n    let result = '';\n    if (files.length > 0) {\n      result += files\n        .map(file => `${file.name}=@${file.path}`)\n        .join(' ');\n    }\n    if (formData.length > 0) {\n      result += formData\n        .map(data => `${data.name}=${data.value}`)\n        .join(' ');\n    }\n    return result;\n  }\n\n  generateOtherPostData() {\n    const postData = this.params.filter(param => param.in === 'postData');\n    const data = postData.reduce((acc, curr) => {\n      acc[curr.name] = curr.value;\n      return acc;\n    }, {});\n    return Object.keys(data)\n      .map(key => `${key}=${data[key]}`)\n      .join(' ');\n  }\n\n  generateCookie() {\n    const cookies = this.params.filter(param => param.in === 'cookie');\n    return `Cookie:${cookies.map(cookie => `${cookie.name}=${cookie.value}`).join(';')}`;\n  }\n}\n\nexport default ShellHttpieGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass ShellWgetGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `wget --header='Accept: application/json' --no-check-certificate --quiet --output-document=- '${this.baseUrl}${url}'`;\n  }\n\n  generateFooterFile(url) {\n    return '';\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === 'application/json') {\n      return ` --header='Content-Type: application/json'`;\n    } else if (this.mimeType === 'multipart/form-data') {\n      return ` --header='Content-Type: multipart/form-data'`;\n    } else {\n      return ` --header='Content-Type: ${this.mimeType}'`;\n    }\n  }\n\n  generateHeaders() {\n    return this.params\n      .filter(param => param.in === 'headers')\n      .map(param => ` --header='${param.name}: ${param.value}'`)\n      .join('');\n  }\n\n  generateQueryParams() {\n    return this.params\n      .filter(param => param.in === 'query')\n      .map(param => ` '${param.name}=${param.value}'`)\n      .join('');\n  }\n\n  generateJsonPostData() {\n    return ` --post-data='${JSON.stringify(this.params.find(param => param.in === 'postData'))}'`;\n  }\n\n  generateMultipartPostData() {\n    const postDataParam = this.params.find(param => param.in === 'postData');\n    const fileParam = this.params.find(param => param.type === 'file');\n\n    let postData = '';\n    if (postDataParam) {\n      for (const [key, value] of Object.entries(postDataParam.value)) {\n        postData += `--form '${key}=${value}' `;\n      }\n    }\n\n    if (fileParam) {\n      postData += ` --form '${fileParam.name}=@${fileParam.path}'`;\n    }\n\n    return postData;\n  }\n\n  generateOtherPostData() {\n    return ` --post-data='${this.params.find(param => param.in === 'postData').value}'`;\n  }\n\n  generateCookie() {\n    return this.params\n      .filter(param => param.in === 'cookie')\n      .map(param => ` --header='Cookie: ${param.name}=${param.value}'`)\n      .join('');\n  }\n\n  generateFilePath() {\n    const fileParam = this.params.find(param => param.type === 'file');\n    return fileParam ? fileParam.path : '';\n  }\n\n  generateWgetCommand() {\n    let url = this.url;\n\n    this.params\n      .filter(param => param.in === 'path')\n      .forEach(param => {\n        url = url.replace(`{${param.name}}`, param.value)\n      });\n\n    let command = this.generateHeaderFile(url);\n\n    if (this.hasCookieParams()) {\n      command += this.generateCookie();\n    }\n\n    if (this.hasMimeType()) {\n      command += this.generateMimeTypeHeader();\n    }\n\n    if (this.hasHeadersParams()) {\n      command += this.generateHeaders();\n    }\n\n    if (this.hasQueryParams()) {\n      command += this.generateQueryParams();\n    } else if (this.hasPostDataParams()) {\n      if (this.mimeType === 'application/json') {\n        command += this.generateJsonPostData();\n      } else if (this.mimeType === 'multipart/form-data') {\n        command += this.generateMultipartPostData()\n      } else {\n        command += this.generateOtherPostData()\n      }\n    }\n\n    command += this.generateFooterFile(this.url);\n\n    return command;\n  }\n\n  generateCode() {\n    const command = this.generateWgetCommand();\n    const filePath = this.generateFilePath();\n\n    if (filePath) {\n      return `${command} -O ${filePath}`;\n    } else {\n      return command;\n    }\n  }\n}\n\n\nexport default ShellWgetGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass Python3Generator extends CodeGenerator {\n  generateHeaderFile(url) {\n    let code = `import http.client\\n\\n`;\n    code += `conn = http.client.HTTPConnection('${this.getHost()}')\\n`;\n    code += `conn.request('${this.method}', '${url}'`;\n\n    return code;\n  }\n\n  generateFooterFile(url) {\n    let code = `\\nresponse = conn.getresponse()\\n`;\n    code += `print(response.read().decode())\\n`;\n    code += `conn.close()\\n`;\n\n    return code;\n  }\n\n  generateMimeTypeHeader() {\n    let code = `\\nheaders = {\\n`;\n    code += `'Content-type': '${this.mimeType}'\\n`;\n    code += `}\\n`;\n    code += `conn.request_headers.update(headers)\\n`;\n\n    return code;\n  }\n\n  generateHeaders() {\n    let code = `\\nheaders = {\\n`;\n    this.params\n      .filter((param) => param.in === 'headers')\n      .forEach((param) => {\n        code += `'${param.name}': '${param.value}',\\n`;\n      });\n    code += `}\\n`;\n    code += `conn.request_headers.update(headers)\\n`;\n\n    return code;\n  }\n\n  generateQueryParams() {\n    let code = `\\nquery_params = {\\n`;\n    this.params\n      .filter((param) => param.in === 'query')\n      .forEach((param) => {\n        code += `'${param.name}': '${param.value}',\\n`;\n      });\n    code += `}\\n`;\n    code += `query_string = http.client.urlencode(query_params)\\n`;\n    code += `conn.request_url += '?' + query_string\\n`;\n\n    return code;\n  }\n\n  generateJsonPostData() {\n    let code = `\\nimport json\\n`;\n    code += `payload = {\\n`;\n    this.params\n      .filter((param) => param.in === 'postData')\n      .forEach((param) => {\n        code += `'${param.name}': '${param.value}',\\n`;\n      });\n    code += `}\\n`;\n    code += `payload_json = json.dumps(payload)\\n`;\n    code += `conn.request_body = payload_json.encode()\\n`;\n\n    return code;\n  }\n\n  generateMultipartPostData() {\n    let code = `\\nimport os\\n`;\n    code += `import http.client\\n`;\n    code += `import mimetypes\\n`;\n    code += `boundary = 'boundary'\\n`;\n    code += `headers = {\\n`;\n    code += `'Content-Type': 'multipart/form-data; boundary=' + boundary\\n`;\n    code += `}\\n`;\n    code += `conn.request_headers.update(headers)\\n`;\n    code += `payload = b''\\n`;\n    this.params\n      .filter((param) => param.in === 'postData')\n      .forEach((param) => {\n        if (param.type === 'file' && param.path) {\n          const filePath = param.path;\n          const contentType = 'application/octet-stream';\n          code += `payload += b'--' + boundary.encode() + b'\\\\r\\\\n'\\n`;\n          code += `payload += f'Content-Disposition: form-data; name=\"${param.name}\"; filename=\"${param.name}\"\\\\r\\\\n'.encode()\\n`;\n          code += `payload += f'Content-Type: ${contentType}\\\\r\\\\n\\\\r\\\\n'.encode()\\n`;\n          code += `with open('${filePath}', 'rb') as f:\\n`;\n          code += `    payload += f.read()\\n`;\n          code += `payload += b'\\\\r\\\\n'\\n`;\n        } else {\n          code += `payload += b'--' + boundary.encode() + b'\\\\r\\\\n'\\n`;\n          code += `payload += f'Content-Disposition: form-data; name=\"${param.name}\"\\\\r\\\\n\\\\r\\\\n'.encode()\\n`;\n          code += `payload += '${param.value}'.encode()\\n`;\n          code += `payload += b'\\\\r\\\\n'\\n`;\n        }\n      });\n    code += `payload += b'--' + boundary.encode() + b'--\\\\r\\\\n'\\n`;\n    code += `conn.request_body = payload\\n`;\n\n    return code;\n  }\n\n  generateOtherPostData() {\n    let code = `\\nimport http.client\\n`;\n    code += `payload = ''\\n`;\n    this.params\n      .filter((param) => param.in === 'postData')\n      .forEach((param) => {\n        code += `payload += '${param.name}=${param.value}&'\\n`;\n      });\n    code += `payload = payload[:-1]\\n`;\n    code += `conn.request_body = payload.encode()\\n`;\n\n    return code;\n  }\n\n  generateCookie() {\n    let code = `\\ncookies = {\\n`;\n    this.params\n      .filter((param) => param.in === 'cookie')\n      .forEach((param) => {\n        code += `'${param.name}': '${param.value}',\\n`;\n      });\n    code += `}\\n`;\n    code += `cookie_string = http.client.cookies.format_cookies(cookies)\\n`;\n    code += `conn.request_headers['Cookie'] = cookie_string\\n`;\n\n    return code;\n  }\n}\n\nexport default Python3Generator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nexport class PythonRequestsGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    let code = `import http.client\\n`;\n    code += `conn = http.client.HTTPSConnection('${this.baseUrl}')\\n`;\n    code += `conn.request('${this.method}', '${url}', `;\n    return code;\n  }\n\n  generateFooterFile(url) {\n    let code = `response = conn.getresponse()\\n`;\n    code += `print(response.read().decode())\\n`;\n    code += `conn.close()\\n`;\n    return code;\n  }\n\n  generateMimeTypeHeader() {\n    let code = `\\nheaders = {\\n`;\n    code += `   'Content-type': '${this.mimeType}'\\n`;\n    code += `}\\n`;\n    code += `conn.request_headers.update(headers)\\n`;\n    return code;\n  }\n\n  generateHeaders() {\n    let code = `\\nheaders = {\\n`;\n    this.params\n      .filter((param) => param.in === 'headers')\n      .forEach((param) => {\n        code += `   '${param.name}': '${param.value}',\\n`;\n      });\n    code += `}\\n`;\n    code += `conn.request_headers.update(headers)\\n`;\n    return code;\n  }\n\n  generateQueryParams() {\n    let code = `\\nurl += '?'\\n`;\n    this.params\n      .filter((param) => param.in === 'query')\n      .forEach((param, index) => {\n        if (index > 0) {\n          code += `url += '&'`;\n        }\n        code += `url += '${param.name}=${param.value}'\\n`;\n      });\n    return code;\n  }\n\n  generateJsonPostData() {\n    let code = `\\nimport json\\n`;\n    code += `payload = json.dumps({\\n`;\n    this.params\n      .filter((param) => param.in === 'postData')\n      .forEach((param, index) => {\n        if (index > 0) {\n          code += ',\\n';\n        }\n        code += `'${param.name}': '${param.value}'`;\n      });\n    code += `})\\n`;\n    code += `conn.request_body = payload.encode()\\n`;\n    return code;\n  }\n\n  generateMultipartPostData() {\n    let code = `\\nimport requests\\n`;\n    code += `files = {\\n`;\n    this.params\n      .filter((param) => param.in === 'postData' && param.type === 'file')\n      .forEach((param) => {\n        code += `'${param.name}': ('${param.path}', open('${param.path}', 'rb'), 'application/octet-stream')`;\n      });\n    code += `}\\n`;\n    code += `response = requests.post('${this.baseUrl}${this.url}', files=files)\\n`;\n    return code;\n  }\n\n  generateOtherPostData() {\n    let code = `\\nimport http.client\\n`;\n    code += `payload = ''\\n`;\n    this.params\n      .filter((param) => param.in === 'postData')\n      .forEach((param) => {\n        code += `payload += '${param.name}=${param.value}&'\\n`;\n      });\n    code += `payload = payload[:-1]\\n`;\n    code += `conn.request_body = payload.encode()\\n`;\n    return code;\n  }\n\n  generateCookie() {\n    let code = `\\ncookies = {\\n`;\n    this.params\n      .filter((param) => param.in === 'cookie')\n      .forEach((param) => {\n        code += `'${param.name}': '${param.value}',\\n`;\n      });\n    code += `}\\n`;\n    code += `cookie_string = http.client.cookies.format_cookies(cookies)\\n`;\n    code += `conn.request_headers['Cookie'] = cookie_string\\n`;\n\n    return code;\n  }\n}\n\nexport default PythonRequestsGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass GoGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    let code = `package main\\n\\nimport (\\n\\t\"fmt\"\\n\\t\"net/http\"\\n\\t\"net/url\"\\n)\\n\\nfunc main() {\\n`;\n\n    code += `\\turl, err := url.Parse(\"${this.baseUrl}${url}\")\\n`;\n    code += `\\tif err != nil {\\n\\t\\tfmt.Println(err)\\n\\t\\treturn\\n\\t}\\n\\n`;\n    code += `\\tclient := &http.Client{}\\n`;\n    code += `\\treq, err := http.NewRequest(\"${this.method}\", url.String(), nil)\\n`;\n    code += `\\tif err != nil {\\n\\t\\tfmt.Println(err)\\n\\t\\treturn\\n\\t}\\n\\n`;\n\n    return code;\n  }\n\n  generateFooterFile(url) {\n    let code = `\\tresp, err := client.Do(req)\\n`;\n    code += `\\tif err != nil {\\n\\t\\tfmt.Println(err)\\n\\t\\treturn\\n\\t}\\n\\tdefer resp.Body.Close()\\n\\n`;\n    code += `\\t// TODO: process response\\n}\\n`;\n\n    return code;\n  }\n\n  generateMimeTypeHeader() {\n    let code = '';\n\n    if (this.mimeType === 'application/json') {\n      code += `\\treq.Header.Set(\"Content-Type\", \"application/json\")\\n`;\n    } else if (this.mimeType === 'multipart/form-data') {\n      code += `\\treq.Header.Set(\"Content-Type\", \"multipart/form-data\")\\n`;\n    } else {\n      code += `\\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\\n`;\n    }\n\n    return code;\n  }\n\n  generateHeaders() {\n    let code = '';\n\n    this.params\n      .filter(param => param.in === 'headers')\n      .forEach(param => {\n        code += `\\treq.Header.Set(\"${param.name}\", \"${param.value}\")\\n`;\n      });\n\n    return code;\n  }\n\n  generateQueryParams() {\n    let code = '';\n\n    const queryParams = this.params.filter(param => param.in === 'query');\n\n    if (queryParams.length > 0) {\n      code += `\\tquery := url.Query()\\n`;\n\n      queryParams.forEach(param => {\n        code += `\\tquery.Add(\"${param.name}\", \"${param.value}\")\\n`;\n      });\n\n      code += `\\turl.RawQuery = query.Encode()\\n\\n`;\n    }\n\n    return code;\n  }\n\n  generateJsonPostData() {\n    let code = '';\n\n    const postDataParams = this.params.filter(param => param.in === 'postData');\n\n    if (postDataParams.length > 0) {\n      code += `\\t// TODO: implement JSON post data\\n`;\n    }\n\n    return code;\n  }\n\n  generateMultipartPostData() {\n    let code = '';\n\n    const postDataParams = this.params.filter(param => param.in === 'postData');\n\n    if (postDataParams.length > 0) {\n      code += `\\t// TODO: implement multipart post data\\n`;\n    }\n\n    return code;\n  }\n\n  generateOtherPostData() {\n    let code = '';\n\n    const postDataParams = this.params.filter(param => param.in === 'postData');\n\n    if (postDataParams.length > 0) {\n      code += `\\t// TODO: implement other post data\\n`;\n    }\n\n    return code;\n  }\n\n  generateCookie() {\n    let code = '';\n\n    const cookieParams = this.params.filter(param => param.in === 'cookie');\n\n    if (cookieParams.length > 0) {\n      code += '\\tcookies := []*http.Cookie{}\\n';\n\n      cookieParams.forEach(param => {\n        code += `\\tcookies = append(cookies, &http.Cookie{Name: \"${param.name}\", Value: \"${param.value}\"})\\n`;\n      });\n\n      code += '\\tcookieJar, _ := cookiejar.New(nil)\\n';\n      code += '\\tcookieJar.SetCookies(url, cookies)\\n';\n      code += '\\tclient.Jar = cookieJar\\n\\n';\n    }\n\n    return code;\n  }\n}\nexport default GoGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass CGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `\n#include <curl/curl.h>\n#include <stdio.h>\n#include <string.h>\n\nint main(void) {\nCURL *curl;\nCURLcode res;\nchar *url = \"${this.baseUrl}${url}\";\n\ncurl = curl_easy_init();\nif(curl) {\n`;\n  }\n\n  generateFooterFile(url) {\n    return `    curl_easy_setopt(curl, CURLOPT_URL, url);\\n     res = curl_easy_perform(curl);\\n     if(res != CURLE_OK)\\n       fprintf(stderr, \"curl_easy_perform() failed: %s\\\\n\",\\n               curl_easy_strerror(res));\\n     curl_easy_cleanup(curl);\\n   }\\n   return 0;\\n }\\n`;\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === 'application/json') {\n      return `    curl_easy_setopt(curl, CURLOPT_HTTPHEADER, [\"Content-Type: application/json\"]);`;\n    } else if (this.mimeType === 'multipart/form-data') {\n      return `\ncurl_mime *mime;\ncurl_mimepart *part;\nstruct curl_slist *headerlist = NULL;\n\nmime = curl_mime_init(curl);\n\npart = curl_mime_addpart(mime);\ncurl_mime_name(part, \"field1\");\ncurl_mime_data(part, \"value1\", CURL_ZERO_TERMINATED);\n\npart = curl_mime_addpart(mime);\ncurl_mime_name(part, \"field2\");\ncurl_mime_filedata(part, \"${this.params.find(param => param.type === 'file').path}\");\n\nheaderlist = curl_slist_append(headerlist, \"Content-Type: multipart/form-data\");\ncurl_easy_setopt(curl, CURLOPT_HTTPHEADER, headerlist);\ncurl_easy_setopt(curl, CURLOPT_MIMEPOST, mime);\n;     } else {       return\ncurl_easy_setopt(curl, CURLOPT_HTTPHEADER, [\"Content-Type: ${this.mimeType}\"]);\n`;\n    }\n  }\n\n  generateHeaders() {\n    const headers = this.params.filter(param => param.in === 'headers');\n    const headerStrings = headers.map(header => \"${header.name}: ${header.value}\");\n    return `    curl_easy_setopt(curl, CURLOPT_HTTPHEADER, [${headerStrings.join(', ')}]);`;\n  }\n\n  generateQueryParams() {\n    const queryParams = this.params.filter(param => param.in === 'query');\n    const queryStrings = queryParams.map(param => `${param.name}=${param.value}`);\n    const queryString = queryStrings.join('&');\n    return `    char *query = \"${queryString}\";\\n     char *urlWithQuery = malloc(strlen(url) + strlen(query) + 2);\\n     strcpy(urlWithQuery, url);\\n     strcat(urlWithQuery, \"?\");\\n     strcat(urlWithQuery, query);\\n     curl_easy_setopt(curl, CURLOPT_URL, urlWithQuery);\\n`;\n  }\n\n  generateJsonPostData() {\n    const postData = this.params.find(param => param.in === 'postData').value;\n    return `    curl_easy_setopt(curl, CURLOPT_POSTFIELDS, \"${postData}\");\\n`;\n  }\n\n  generateMultipartPostData() {\n    return this.generateMimeTypeHeader();\n  }\n\n  generateOtherPostData() {\n    const postData = this.params.find(param => param.in === 'postData').value;\n    return `    curl_easy_setopt(curl, CURLOPT_POSTFIELDS, \"${postData}\");`;\n  }\n\n  generateCookie() {\n    const cookieParams = this.params.filter(param => param.in === 'cookie');\n    const cookieStrings = cookieParams.map(param => `${param.name}=${param.value}`);\n    const cookieString = cookieStrings.join('; ');\n    return `    curl_easy_setopt(curl, CURLOPT_COOKIE, \"${cookieString}\");`;\n  }\n}\n\nexport default CGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass OcamlGenerator extends CodeGenerator {\n  constructor(data) {\n    super(data);\n  }\n\n  generateHeaderFile(url) {\n    return `let url = \"${this.baseUrl}${url}\" in\\n`;\n  }\n\n  generateFooterFile() {\n    return `;;`;\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === 'application/json') {\n      return `let headers = [(\"Content-Type\", \"application/json\")] in\\n`;\n    } else if (this.mimeType === 'multipart/form-data') {\n      return `let headers = [(\"Content-Type\", \"multipart/form-data\")] in\\n`;\n    } else {\n      return `let headers = [(\"Content-Type\", \"application/x-www-form-urlencoded\")] in\\n`;\n    }\n  }\n\n  generateHeaders() {\n    const headers = this.params\n      .filter(param => param.in === 'headers')\n      .map(param => `(\"${param.name}\", \"${param.value}\")`)\n      .join('; ');\n    return `let headers = [${headers}] in\\n`;\n  }\n\n  generateQueryParams() {\n    const params = this.params\n      .filter(param => param.in === 'query')\n      .map(param => `(\"${param.name}\", \"${param.value}\")`)\n      .join('; ');\n    return `let params = [${params}] in\\n`;\n  }\n\n  generateJsonPostData() {\n    const data = this.params.find(param => param.in === 'postData').value;\n    return `let body = ${JSON.stringify(data)} in\\n`;\n  }\n\n  generateMultipartPostData() {\n    const data = this.params.find(param => param.in === 'postData');\n    const name = data.name;\n    return `let body = [(\"${name}\", \"file\")] in\\n`;\n  }\n\n  generateOtherPostData() {\n    const data = this.params.find(param => param.in === 'postData').value;\n    return `let body = \"${data}\" in\\n`;\n  }\n\n  generateCookie() {\n    const cookies = this.params\n      .filter(param => param.in === 'cookie')\n      .map(param => `(\"${param.name}\", \"${param.value}\")`)\n      .join('; ');\n    return `let cookies = [${cookies}] in\\n`;\n  }\n\n}\n\nexport default OcamlGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass CSharpHttpClientGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `using System;\n    using System.Net.Http;\n\n    namespace MyNamespace\n    {\n        class MyClass\n        {\n            static HttpClient client = new HttpClient();\n\n            static void Main()\n            {\n                var url = \"${this.baseUrl}${url}\";\n                `;\n  }\n\n  generateFooterFile(url) {\n    return `\n            Console.WriteLine(responseString);\n            }\n        }\n    }`;\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === \"application/json\") {\n      return `client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));`;\n    } else if (this.mimeType === \"multipart/form-data\") {\n      return `client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"multipart/form-data\"));`;\n    } else {\n      return ``;\n    }\n  }\n\n  generateHeaders() {\n    let headers = \"\";\n    this.params\n      .filter((param) => param.in === \"headers\")\n      .forEach((param) => {\n        headers += `client.DefaultRequestHeaders.Add(\"${param.name}\", \"${param.value}\");\\n`;\n      });\n    return headers;\n  }\n\n  generateQueryParams() {\n    let query = \"\";\n    this.params\n      .filter((param) => param.in === \"query\")\n      .forEach((param) => {\n        query += `${param.name}=${param.value}&`;\n      });\n    if (query !== \"\") {\n      query = \"?\" + query.slice(0, -1);\n    }\n    return `url += \"${query}\";`;\n  }\n\n  generateJsonPostData() {\n    return `var postData = new StringContent(\"${JSON.stringify(this.params.filter((param) => param.in === \"postData\")[0].value)}\", System.Text.Encoding.UTF8, \"application/json\");`;\n  }\n\n  generateMultipartPostData() {\n    return `var formData = new MultipartFormDataContent();\n    `;\n  }\n\n  generateOtherPostData() {\n    return `var postData = new StringContent(\"${this.params.filter((param) => param.in === \"postData\")[0].value}\", System.Text.Encoding.UTF8, \"${this.mimeType}\");`;\n  }\n\n  generateCookie() {\n    let cookies = \"\";\n    this.params\n      .filter((param) => param.in === \"cookie\")\n      .forEach((param) => {\n        cookies += `${param.name}=${param.value}; `;\n      });\n    return `client.DefaultRequestHeaders.Add(\"Cookie\", \"${cookies.trim()}\");`;\n  }\n}\n\nexport default CSharpHttpClientGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass CSharpRestSharpGenerator extends CodeGenerator {\n  constructor(data) {\n    super(data);\n  }\n\n  generateHeaderFile(url) {\n    return `var client = new RestSharp.RestClient(\"${this.baseUrl}\");\nvar request = new RestSharp.RestRequest(\"${url}\", RestSharp.Method.${this.method});\n`;\n  }\n\n  generateFooterFile(url) {\n    return `var response = client.Execute(request);\nConsole.WriteLine(response.Content);`;\n  }\n\n  generateMimeTypeHeader() {\n    return `request.AddParameter(\"${this.mimeType}\", body, RestSharp.ParameterType.RequestBody);`;\n  }\n\n  generateHeaders() {\n    let headers = '';\n    this.params.filter(param => param.in === 'headers')\n      .forEach(param => {\n        headers += `request.AddHeader(\"${param.name}\", \"${param.value}\");\n`;\n      });\n    return headers;\n  }\n\n  generateQueryParams() {\n    let queryParams = '';\n    this.params.filter(param => param.in === 'query')\n      .forEach(param => {\n        queryParams += `request.AddParameter(\"${param.name}\", \"${param.value}\");\n`;\n      });\n    return queryParams;\n  }\n\n  generateJsonPostData() {\n    return `var body = JsonConvert.SerializeObject({${this.params.filter(param => param.in === 'postData')\n      .map(param => `\"${param.name}\": \"${param.value}\"`).join(',')}});`;\n  }\n\n  generateMultipartPostData() {\n    const params = this.params.filter(param => param.in === 'postData')\n      .forEach(param => `body.Add(new RestSharp.FormDataParameter(\"${param.name}\", \"${param.value}\"`);\n    return `var body = new RestSharp.MultipartFormDataContent();\n${params}`;\n  }\n\n  generateOtherPostData() {\n    return `var body = \"${this.params.find(param => param.in === 'postData').value}\";`;\n  }\n\n  generateCookie() {\n    let cookies = '';\n    this.params.filter(param => param.in === 'cookie')\n      .forEach(param => {\n        cookies += `request.AddCookie(\"${param.name}\", \"${param.value}\");`;\n      });\n    return cookies;\n  }\n}\n\nexport default CSharpRestSharpGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass JavaAsyncHttpClientGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `AsyncHttpClient asyncHttpClient = new DefaultAsyncHttpClient();\n        BoundRequestBuilder requestBuilder = asyncHttpClient.prepare(\"${this.method}\", \"${this.baseUrl}${url}\")`;\n  }\n\n  generateFooterFile(url) {\n    return `ListenableFuture<Response> responseFuture = requestBuilder.execute();\n        Response response = responseFuture.get();\n        asyncHttpClient.close();\n        System.out.println(response.getResponseBody());`;\n  }\n\n  generateMimeTypeHeader() {\n    return `requestBuilder.addHeader(\"Content-Type\", \"${this.mimeType}\");`;\n  }\n\n  generateHeaders() {\n    let headers = '';\n    this.params.forEach(param => {\n      if (param.in === 'headers') {\n        headers += `requestBuilder.addHeader(\"${param.name}\", \"${param.value}\");\\n`;\n      }\n    });\n    return headers;\n  }\n\n  generateQueryParams() {\n    let queryParams = '';\n    this.params.forEach(param => {\n      if (param.in === 'query') {\n        queryParams += `requestBuilder.addQueryParam(\"${param.name}\", \"${param.value}\");\\n`;\n      }\n    });\n    return queryParams;\n  }\n\n  generateJsonPostData() {\n    let jsonData = '';\n    this.params.forEach(param => {\n      if (param.in === 'postData') {\n        jsonData += `String json = \"${param.value}\";\\n`;\n        jsonData += `requestBuilder.setBody(json);\\n`;\n      }\n    });\n    return jsonData;\n  }\n\n  generateMultipartPostData() {\n    const formData = this.params\n      .filter(param => param.in === 'postData')\n      .reduce((formData, param) => {\n        if (param.type === 'file') {\n          // If the parameter is a file, add its contents as a buffer to the form data\n          formData.push(\n            `new FilePart(\"${param.name}\", new File(\"${param.path}\"), \"${param.path}\")`\n          );\n        } else {\n          // If the parameter is not a file, add its value as a string to the form data\n          formData.push(\n            `new StringPart(\"${param.name}\", \"${param.value}\")`\n          );\n        }\n        return formData;\n      }, []);\n\n    let multipartData = `requestBuilder.setBody(new MultipartBodyBuilder()`;\n    formData.forEach(data => {\n      multipartData += `\\n.addPart(${data})`;\n    });\n    multipartData += `\\n.build());\\n`;\n\n    return multipartData;\n  }\n\n  generateOtherPostData() {\n    let postData = '';\n    this.params.forEach(param => {\n      if (param.in === 'postData') {\n        postData += `String postData = \"${param.value}\";\\n`;\n        postData += `requestBuilder.setBody(postData);\\n`;\n      }\n    });\n    return postData;\n  }\n\n  generateCookie() {\n    let cookieData = '';\n    this.params.forEach(param => {\n      if (param.in === 'cookie') {\n        cookieData += `requestBuilder.addCookie(new Cookie(\"${param.name}\", \"${param.value}\"));\\n`;\n      }\n    });\n    return cookieData;\n  }\n}\n\n\nexport default JavaAsyncHttpClientGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass JavaNetHttpClientGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `HttpClient client = HttpClient.newHttpClient();\nHttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(\"${this.baseUrl}${url}\"))\n        .method(\"${this.method}\", HttpRequest.BodyPublishers.noBody())`;\n  }\n\n  generateFooterFile(url) {\n    return `HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\nSystem.out.println(response.body());`;\n  }\n\n  generateMimeTypeHeader() {\n    switch (this.mimeType) {\n      case 'application/json':\n        return `request = request.header(\"Content-Type\", \"application/json\");`;\n      case 'multipart/form-data':\n        return `request = request.header(\"Content-Type\", \"multipart/form-data\");`;\n      case 'application/x-www-form-urlencoded':\n        return `request = request.header(\"Content-Type\", \"application/x-www-form-urlencoded\");`;\n      default:\n        return '';\n    }\n  }\n\n  generateHeaders() {\n    return this.params\n      .filter(param => param.in === 'headers')\n      .map(param => `request = request.header(\"${param.name}\", \"${param.value}\");`)\n      .join('\\n');\n  }\n\n  generateQueryParams() {\n    const queryParams = this.params.filter(param => param.in === 'query');\n    if (queryParams.length === 0) {\n      return '';\n    }\n    const queryStr = queryParams.map(param => `${param.name}=${param.value}`).join('&');\n    return `request = request.uri(URI.create(\"${this.baseUrl}${this.url}?${queryStr}\"));`;\n  }\n\n  generateJsonPostData() {\n    const postData = this.params.find(param => param.in === 'postData');\n    if (!postData) {\n      return '';\n    }\n    return `String json = \"${postData.value}\";\nrequest = request.method(\"${this.method}\", HttpRequest.BodyPublishers.ofString(json));`;\n  }\n\n  generateMultipartPostData() {\n    const postData = this.params.find(param => param.in === 'postData');\n    if (!postData || postData.type !== 'file' || !postData.path) {\n      return '';\n    }\n    return `Path path = Paths.get(\"${postData.path}\");\nString fileName = path.getFileName().toString();\nString boundary = \"*****\";\nString CRLF = \"\\\\r\\\\n\";\n\nrequest = request.method(\"${this.method}\", HttpRequest.BodyPublishers.ofMultipartData(\n        new MultipartBodyPublisher(boundary,\n                List.of(\n                        new FilePart(\"file\", fileName, path.toFile())\n                )\n        )\n));`;\n  }\n\n  generateOtherPostData() {\n    const postData = this.params.find(param => param.in === 'postData');\n    if (!postData) {\n      return '';\n    }\n    return `String data = \"${postData.value}\";\nrequest = request.method(\"${this.method}\", HttpRequest.BodyPublishers.ofString(data));`;\n  }\n\n  generateCookie() {\n    return this.params\n      .filter(param => param.in === 'cookie')\n      .map(param => `request = request.header(\"Cookie\", \"${param.name}=${param.value}\");`)\n      .join('\\n');\n  }\n}\n\nexport default JavaNetHttpClientGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\nconst OKHTTP_IMPORTS = `import okhttp3.*;\\nimport java.io.*;\\n`;\n\nclass JavaOkHttpGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    let code = OKHTTP_IMPORTS + `OkHttpClient client = new OkHttpClient();\\n`;\n    code += `HttpUrl.Builder urlBuilder = HttpUrl.parse(\"${this.baseUrl}\" + \"${url}\").newBuilder();\\n`;\n    code += `Request.Builder requestBuilder = new Request.Builder().url(urlBuilder.build());\\n`;\n    code += `requestBuilder.method(\"${this.method}\", null);\\n`;\n    return code;\n  }\n\n  generateFooterFile() {\n    let code = `Response response = client.newCall(requestBuilder.build()).execute();\\n`;\n    code += `System.out.println(response.body().string());\\n`;\n    return code;\n  }\n\n  generateMimeTypeHeader() {\n    return `requestBuilder.header(\"Content-Type\", \"${this.mimeType}\");\\n`;\n  }\n\n  generateHeaders() {\n    let code = '';\n    this.params\n      .filter((param) => param.in === 'headers')\n      .forEach((param) => {\n        code += `requestBuilder.header(\"${param.name}\", \"${param.value}\");\\n`;\n      });\n    return code;\n  }\n\n  generateQueryParams() {\n    let code = '';\n    this.params\n      .filter((param) => param.in === 'query')\n      .forEach((param) => {\n        code += `urlBuilder.addQueryParameter(\"${param.name}\", \"${param.value}\");\\n`;\n      });\n    return code;\n  }\n\n  generateJsonPostData() {\n    let code = '';\n    this.params\n      .filter((param) => param.in === 'postData')\n      .forEach((param) => {\n        if (this.mimeType === 'application/json') {\n          code += `String json = \"${param.value}\";\\n`;\n          code += `RequestBody body = RequestBody.create(MediaType.parse(\"application/json; charset=utf-8\"), json);\\n`;\n          code += `requestBuilder.method(\"${this.method}\", body);\\n`;\n        }\n      });\n    return code;\n  }\n\n  generateMultipartPostData() {\n    let code = '';\n    this.params\n      .filter((param) => param.in === 'postData' && param.type === 'file')\n      .forEach((param) => {\n        code += `RequestBody body = RequestBody.create(MediaType.parse(\"multipart/form-data\"), ${param.name});\\n`;\n        code += `requestBuilder.method(\"${this.method}\", new Request.Builder().url(urlBuilder.build()).post(body).build(), body);\\n`;\n        code += `client.newCall(requestBuilder.build()).execute().body().string();\\n`;\n      });\n    return code;\n  }\n\n  generateOtherPostData() {\n    let code = '';\n    this.params\n      .filter((param) => param.in === 'postData' && param.type !== 'file')\n      .forEach((param) => {\n        code += `RequestBody body = RequestBody.create(MediaType.parse(\"${this.mimeType}\"), \"${param.value}\");\\n`;\n        code += `requestBuilder.method(\"${this.method}\", body);\\n`;\n      });\n    return code;\n  }\n\n  generateCookie() {\n    let code = '';\n    this.params\n      .filter((param) => param.in === 'cookie')\n      .forEach((param) => {\n        code += `requestBuilder.addHeader(\"Cookie\", \"${param.name}=${param.value}\");\\n`;\n      });\n    return code;\n  }\n}\n\n\nexport default JavaOkHttpGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass HttpUrlStringGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    const headers = this.getHeaders();\n    const cookie = this.getCookie();\n\n    let headerFile =\n      `${this.method} ${this.baseUrl}${this.url} HTTP/1.1\\r\\n` +\n      `Host: ${this.getHost()}\\r\\n`;\n\n    if (cookie) {\n      headerFile += `Cookie: ${cookie}\\r\\n`;\n    }\n\n    for (let i in headers) {\n      headerFile += `${i}: ${headers[i]}\\r\\n`;\n    }\n\n    if (this.hasPostDataParams()) {\n      const postData = this.getPostData();\n\n      if (postData) {\n        headerFile += `Content-Type: ${this.mimeType}\\r\\n`;\n        headerFile += `Content-Length: ${Buffer.byteLength(postData.toString())}\\r\\n`;\n      }\n    }\n\n    headerFile += '\\r\\n';\n\n    return headerFile;\n  }\n\n  generateFooterFile(url) {\n    return '';\n  }\n\n  generateMimeTypeHeader() {\n    return '';\n  }\n\n  generateHeaders() {\n    const headers = this.getHeaders();\n    let headersString = '';\n\n    for (const header in headers) {\n      headersString += `${header}: ${headers[header]}\\r\\n`;\n    }\n\n    return headersString;\n  }\n\n  generateQueryParams() {\n    return '';\n  }\n\n  generateJsonPostData() {\n    const postData = this.getPostData();\n    return JSON.stringify(postData);\n  }\n\n  generateMultipartPostData() {\n    const boundary = '----WebKitFormBoundary7MA4YWxkTrZu0gW';\n\n    const formData = this.params\n      .filter(param => param.in === 'postData')\n      .reduce((formData, param) => {\n        formData.push(\n          `--${boundary}\\r\\n` +\n          `Content-Disposition: form-data; name=\"${param.name}\"\\r\\n\\r\\n` +\n          `${param.value}\\r\\n`\n        );\n        return formData;\n      }, []);\n\n    // Add the closing boundary to the form data\n    formData.push(`--${boundary}--\\r\\n`);\n\n    // Join the form data into a single string and return it\n    return formData.join('');\n  }\n\n  generateOtherPostData() {\n    const postData = this.getPostData();\n    return this.serializeQueryParams(postData);\n  }\n\n  generateCookie() {\n    return this.getCookie();\n  }\n\n  serializeQueryParams(params) {\n    return Object.keys(params)\n      .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n      .join('&');\n  }\n\n  getHeaders() {\n    const headers = {};\n\n    this.params\n      .filter(param => param.in === 'headers')\n      .forEach(param => {\n        headers[param.name] = param.value;\n      });\n\n    return headers;\n  }\n\n  getPostData() {\n    return this.params\n      .filter(param => param.in === 'postData')\n      .reduce((postData, param) => {\n        postData[param.name] = param.value;\n        return postData;\n      }, {});\n  }\n\n  getCookie() {\n    return this.params\n      .filter(param => param.in === 'cookie')\n      .map(param => `${encodeURIComponent(param.name)}=${encodeURIComponent(param.value)}`)\n      .join('; ');\n  }\n}\n\nexport default HttpUrlStringGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nexport class JavaUnirestGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `HttpResponse<String> response = Unirest.${this.method.toLowerCase()}(\"${this.baseUrl}${url}\")\\n`;\n  }\n\n  generateFooterFile(url) {\n    return `HttpResponse<String> response = request.asString();\\n`;\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === 'application/json') {\n      return `header(\"Content-Type\", \"application/json\")\\n`;\n    } else if (this.mimeType === 'multipart/form-data') {\n      return `Not supported in Unirest\\n`;\n    } else {\n      return '';\n    }\n  }\n\n  generateHeaders() {\n    let headers = '';\n\n    this.params\n      .filter(param => param.in === 'headers')\n      .forEach(param => {\n        headers += `.header(\"${param.name}\", \"${param.value}\")\\n`;\n      });\n\n    return headers;\n  }\n\n  generateQueryParams() {\n    let queryParams = '';\n\n    this.params\n      .filter(param => param.in === 'query')\n      .forEach(param => {\n        queryParams += `.queryString(\"${param.name}\", \"${param.value}\")\\n`;\n      });\n\n    return queryParams;\n  }\n\n  generateJsonPostData() {\n    let postData = JSON.stringify(this.params.filter(param => param.in === 'postData').reduce((obj, param) => {\n      obj[param.name] = param.value;\n      return obj;\n    }, {}));\n\n    return `.body(\"${postData}\")\\n`;\n  }\n\n  generateMultipartPostData() {\n    return 'Not supported in Unirest\\n';\n  }\n\n  generateOtherPostData() {\n    let postData = '';\n\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        postData += `${param.name}=${param.value}&`;\n      });\n\n    postData = postData.slice(0, -1);\n\n    return `.body(\"${postData}\")\\n`;\n  }\n\n  generateCookie() {\n    let cookieHeader = '';\n\n    this.params\n      .filter(param => param.in === 'cookie')\n      .forEach(param => {\n        cookieHeader += `${param.value}; \\n`;\n      });\n\n    if (cookieHeader !== '') {\n      cookieHeader = `.header(\"Cookie\", \"${cookieHeader}\")\\n`;\n    }\n\n    return cookieHeader;\n  }\n}\n\nexport default JavaUnirestGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass ClojureGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `(require '[clj-http.client :as client])\n(def url \"${url}\")\\n`;\n  }\n\n  generateFooterFile(url) {\n    return '';\n  }\n\n  generateMimeTypeHeader() {\n    return '';\n  }\n\n  generateHeaders() {\n    const headers = this.params.find((param) => param.in === 'headers').value;\n    const headerString = Object.entries(headers)\n      .map(([key, value]) => `(\"${key}\" \"${value}\")`)\n      .join('\\n');\n    return `(def headers [${headerString}])\\n`;\n  }\n\n  generateQueryParams() {\n    const queryParams = this.params\n      .filter((param) => param.in === 'query')\n      .map(({ value, name }) => `(\"${name}\" \"${value}\")`)\n      .join('\\n');\n    return `(def query-params [${queryParams}])\\n`;\n  }\n\n  generateJsonPostData() {\n    const postData = this.params.find((param) => param.in === 'postData').value;\n    const postDataString = JSON.stringify(postData)\n      .replace(/\"/g, '\\\\\"')\n      .replace(/:/g, ' ')\n      .replace(/,/g, '\\n');\n    return `(def post-data \"${postDataString}\")\\n`;\n  }\n\n  generateMultipartPostData() {\n    // Not implemented\n    return '';\n  }\n\n  generateOtherPostData() {\n    const postData = this.params.find((param) => param.in === 'postData').value;\n    const postDataString = JSON.stringify(postData)\n      .replace(/\"/g, '\\\\\"')\n      .replace(/:/g, ' ')\n      .replace(/,/g, '\\n');\n    return `(def post-data \"${postDataString}\")\\n`;\n  }\n\n  generateCookie() {\n    const cookies = this.params.find((param) => param.in === 'cookie').value;\n    const cookieString = Object.entries(cookies)\n      .map(([key, value]) => `(\"${key}\" \"${value}\")`)\n      .join('\\n');\n    return `(def cookies [${cookieString}])\\n`;\n  }\n\n  generateCode() {\n    let url = this.url;\n\n    this.params\n      .filter((param) => param.in === 'path')\n      .forEach((param) => {\n        url = url.replace(`{${param.name}}`, param.value);\n      });\n\n    let clojureCode = this.generateHeaderFile(url);\n\n    if (this.hasCookieParams()) {\n      clojureCode += this.generateCookie();\n    }\n\n    if (this.hasHeadersParams()) {\n      clojureCode += this.generateHeaders();\n    }\n\n    if (this.hasQueryParams()) {\n      clojureCode += this.generateQueryParams();\n    } else if (this.hasPostDataParams()) {\n      if (this.mimeType === 'application/json') {\n        clojureCode += this.generateJsonPostData();\n      } else if (this.mimeType === 'multipart/form-data') {\n        clojureCode += this.generateMultipartPostData();\n      } else {\n        clojureCode += this.generateOtherPostData();\n      }\n    }\n\n    clojureCode += `(def response (client/${this.method.toLowerCase()} url`;\n    if (this.hasHeadersParams()) {\n      clojureCode += '\\n {:headers headers}';\n    }\n    if (this.hasQueryParams()) {\n      clojureCode += '\\n {:query-params query-params}';\n    }\n    if (this.hasPostDataParams()) {\n      clojureCode += '\\n {:body post-data}';\n    }\n    if (this.hasCookieParams()) {\n      clojureCode += '\\n {:cookies cookies}';\n    }\n    clojureCode += '))\\n';\n\n    clojureCode += this.generateFooterFile(url);\n\n    return clojureCode;\n  }\n}\nexport default ClojureGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass KotlinGenerator extends CodeGenerator {\n  constructor(data) {\n    super(data);\n  }\n\n  generateHeaderFile(url) {\n    return `\n      val url = \"${this.baseUrl}${url}\"\n      val request = HttpRequest(url = url, method = HttpMethod.${this.method})\n    `;\n  }\n\n  generateFooterFile(url) {\n    return `\n      val response = client.execute(request)\n      if (response.status.isSuccess()) {\n          // handle successful response\n      } else {\n          // handle unsuccessful response\n      }\n    `;\n  }\n\n  generateMimeTypeHeader() {\n    return `\n      request.headers.append(\"Content-Type\", \"${this.mimeType}\")\n    `;\n  }\n\n  generateHeaders() {\n    const headers = this.params.filter(param => param.in === 'headers');\n    let headersCode = '';\n    for (let i = 0; i < headers.length; i++) {\n      const header = headers[i];\n      headersCode += `\n        request.headers.append(\"${header.name}\", \"${header.value}\")\n      `;\n    }\n    return headersCode;\n  }\n\n  generateQueryParams() {\n    const queryParams = this.params.filter(param => param.in === 'query');\n    let queryParamsCode = '';\n    for (let i = 0; i < queryParams.length; i++) {\n      const queryParam = queryParams[i];\n      queryParamsCode += `\n        request.parameters.append(\"${queryParam.name}\", \"${queryParam.value}\")\n      `;\n    }\n    return queryParamsCode;\n  }\n\n  generateJsonPostData() {\n    const postDataParams = this.params.filter(param => param.in === 'postData');\n    let postDataCode = '';\n    for (let i = 0; i < postDataParams.length; i++) {\n      const postDataParam = postDataParams[i];\n      postDataCode += `\n        val ${postDataParam.name} = ${postDataParam.value}\n      `;\n    }\n    postDataCode += `\n      val json = Json { ignoreUnknownKeys = true }\n      request.body = TextContent(json.encodeToString(${postDataParams[0].name}), contentType = ContentType.Application.Json)\n    `;\n    return postDataCode;\n  }\n\n  generateMultipartPostData() {\n    const postDataParams = this.params.filter(param => param.in === 'postData');\n    let postDataCode = '';\n    for (let i = 0; i < postDataParams.length; i++) {\n      const postDataParam = postDataParams[i];\n      if (postDataParam.type === 'file') {\n        postDataCode += `\n          val ${postDataParam.name}File = File(\"${postDataParam.path}\")\n          val ${postDataParam.name}Part = formData {\n              append(\"${postDataParam.name}\", ${postDataParam.name}File.readBytes(), Headers.build {\n                  append(HttpHeaders.ContentDisposition, \"filename=\\${${postDataParam.name}File.name}\")\n              })\n          }\n        `;\n      } else {\n        postDataCode += `\n          val ${postDataParam.name}Part = formData {\n              append(\"${postDataParam.name}\", \"${postDataParam.value}\")\n          }\n        `;\n      }\n    }\n    postDataCode += `\n      request.body = ${postDataParams.map(param => `${param.name}Part`).join(' + ')}\n    `;\n    return postDataCode;\n  }\n\n  generateOtherPostData() {\n    const postDataParams = this.params.filter(param => param.in === 'postData');\n    let postDataCode = '';\n    for (let i = 0; i < postDataParams.length; i++) {\n      const postDataParam = postDataParams[i];\n      postDataCode += `\n        val ${postDataParam.name} = \"${postDataParam.value}\"\n      `;\n    }\n    postDataCode += `\n      request.body = TextContent(\"${postDataParams.map(param => `\\${${param.name}}`).join('&')}\", contentType = ContentType.Application.FormUrlEncoded)\n    `;\n    return postDataCode;\n  }\n\n  generateCookie() {\n    const cookieParams = this.params.filter(param => param.in === 'cookie');\n    let cookieCode = '';\n    for (let i = 0; i < cookieParams.length; i++) {\n      const cookieParam = cookieParams[i];\n      cookieCode += `\n        request.cookies.append(\"${cookieParam.name}\", \"${cookieParam.value}\")\n      `;\n    }\n    return cookieCode;\n  }\n}\n\nexport default KotlinGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass PhpCurlGenerator extends CodeGenerator {\n\n  generateHeaderFile(url) {\n    return `<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, '${this.baseUrl}${url}');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n`;\n  }\n\n  generateFooterFile(url) {\n    return `curl_close($ch);\n?>`;\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === 'application/json') {\n      return `curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));`;\n    } else if (this.mimeType === 'multipart/form-data') {\n      return `curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: multipart/form-data'));`;\n    } else {\n      return '';\n    }\n  }\n\n  generateHeaders() {\n    const headers = this.params.filter(param => param.in === 'headers');\n    if (headers.length) {\n      const headerStr = headers.map(header => `${header.name}: ${header.value}`).join('\\\\r\\\\n');\n      return `curl_setopt($ch, CURLOPT_HTTPHEADER, array('${headerStr}'));`;\n    } else {\n      return '';\n    }\n  }\n\n  generateQueryParams() {\n    const queryParams = this.params.filter(param => param.in === 'query');\n    const queryStr = queryParams.map(param => `${param.name}=${param.value}`).join('&');\n    return `curl_setopt($ch, CURLOPT_URL, '${this.baseUrl}${this.url}?${queryStr}');`;\n  }\n\n  generateJsonPostData() {\n    const postData = this.params.find(param => param.in === 'postData');\n    return `curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(${postData.value}));`;\n  }\n\n  generateMultipartPostData() {\n    const formData = this.params.filter(param => param.in === 'postData');\n    const formDataStr = formData.map(param => `--boundary\\\\r\\\\nContent-Disposition: form-data; name=\"${param.name}\"; filename=\"${param.path}\"\\\\r\\\\nContent-Type: ${param.type}\\\\r\\\\n\\\\r\\\\n${param.value}\\\\r\\\\n`).join('');\n    return `curl_setopt($ch, CURLOPT_POSTFIELDS, '${formDataStr}--boundary--\\\\r\\\\n');`;\n  }\n\n  generateOtherPostData() {\n    const postData = this.params.find(param => param.in === 'postData');\n    return `curl_setopt($ch, CURLOPT_POSTFIELDS, '${postData.value}');`;\n  }\n\n  generateCookie() {\n    const cookieParams = this.params.filter(param => param.in === 'cookie');\n    const cookieStr = cookieParams.map(param => `${param.name}=${param.value}`).join('; ');\n    return `curl_setopt($ch, CURLOPT_COOKIE, '${cookieStr}');`;\n  }\n}\n\nexport default PhpCurlGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass PhpGuzzleGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `<?php\nrequire_once 'vendor/autoload.php';\n\n$httpClient = new GuzzleHttp\\\\Client([\n  'base_uri' => '${this.baseUrl}',\n  'verify' => false,\n]);\n\n$requestOptions = [\n  RequestOptions::${this.method},\n  '${url}',\n`;\n  }\n\n  generateFooterFile() {\n    return `\n];\n\n$response = $httpClient->request(...$requestOptions);\n\necho $response->getBody();\n`;\n  }\n\n  generateMimeTypeHeader() {\n    return `  'headers' => [\n    'Content-Type' => '${this.mimeType}',\n  ],\n`;\n  }\n\n  generateHeaders() {\n    const headers = this.params.filter(param => param.in === 'headers');\n    if (headers.length === 0) return '';\n\n    return `  'headers' => [\n${headers.map(param => `    '${param.name}' => '${param.value}',`).join('\\n')}\n  ],\n`;\n  }\n\n  generateQueryParams() {\n    const queryParams = this.params.filter(param => param.in === 'query');\n    if (queryParams.length === 0) return '';\n\n    return `  'query' => [\n${queryParams.map(param => `    '${param.name}' => '${param.value}',`).join('\\n')}\n  ],\n`;\n  }\n\n  generateJsonPostData() {\n    const postData = this.params.find(param => param.in === 'postData');\n    if (!postData) return '';\n\n    return `  'json' => ${postData.value},\n`;\n  }\n\n  generateMultipartPostData() {\n    const postData = this.params.find(param => param.in === 'postData');\n    if (!postData) return '';\n\n    const formData = postData.value.split('&').map(param => param.split('='));\n    const fields = formData.map(([name, value]) => {\n      if (name.startsWith('@')) {\n        const path = name.substring(1);\n        return `    [\n      'name' => '${value}',\n      'contents' => fopen('${path}', 'r')\n    ],`;\n      } else {\n        return `    [\n      'name' => '${name}',\n      'contents' => '${value}'\n    ],`;\n      }\n    }).join('\\n');\n\n    return `  'multipart' => [\n${fields}\n  ],\n`;\n  }\n\n  generateOtherPostData() {\n    const postData = this.params.find(param => param.in === 'postData');\n    if (!postData) return '';\n\n    return `  'body' => '${postData.value}',\n`;\n  }\n\n  generateCookie() {\n    const cookieParams = this.params.filter(param => param.in === 'cookie');\n    if (cookieParams.length === 0) return '';\n\n    const cookieString = cookieParams.map(param => `${param.name}=${param.value}`).join(';');\n\n    return `  'headers' => [\n    'Cookie' => '${cookieString}',\n  ],\n`;\n  }\n}\n\nexport default PhpGuzzleGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nexport class PowerShellWebRequestGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `$response = Invoke-WebRequest -Uri \"${this.baseUrl}${url}\" -Method ${this.method} `;\n  }\n\n  generateFooterFile(url) {\n    return `$response`;\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === \"application/json\") {\n      return `-ContentType \"application/json\"`;\n    } else if (this.mimeType === \"multipart/form-data\") {\n      return `-ContentType \"multipart/form-data\"`;\n    } else {\n      return `-ContentType \"application/x-www-form-urlencoded\"`;\n    }\n  }\n\n  generateHeaders() {\n    const headerParams = this.params.filter(\n      (param) => param.in === \"headers\"\n    );\n    let headersCode = \"\";\n    headerParams.forEach((param) => {\n      headersCode += `-Header @{\"${param.name}\"=\"${param.value}\"}\\n`;\n    });\n    return headersCode;\n  }\n\n  generateQueryParams() {\n    const queryParams = this.params.filter((param) => param.in === \"query\");\n    let queryParamsCode = \"\";\n    queryParams.forEach((param) => {\n      queryParamsCode += `'${param.name}'='${param.value}'&`;\n    });\n    if (queryParamsCode) {\n      queryParamsCode = queryParamsCode.slice(0, -1);\n      return `-Uri \"${this.baseUrl}${this.url}?${queryParamsCode}\"`;\n    }\n    return \"\";\n  }\n\n  generateJsonPostData() {\n    const postDataParams = this.params.filter(\n      (param) => param.in === \"postData\"\n    );\n    let postDataCode = \"\";\n    postDataParams.forEach((param) => {\n      postDataCode += `\"${param.name}\": \"${param.value}\",`;\n    });\n    if (postDataCode) {\n      postDataCode = postDataCode.slice(0, -1);\n      return `-Body '{\"${postDataCode}}' ${this.generateMimeTypeHeader()}`;\n    }\n    return \"\";\n  }\n\n  generateMultipartPostData() {\n    const postDataParams = this.params.filter(\n      (param) => param.in === \"postData\" && param.type === \"file\"\n    );\n    let multipartDataCode = \"\";\n    postDataParams.forEach((param) => {\n      multipartDataCode += `-Form @{\"${param.name}\" = (Get-Item \"${param.path}\")};`;\n    });\n    if (multipartDataCode) {\n      multipartDataCode = multipartDataCode.slice(0, -1);\n      return `${multipartDataCode} ${this.generateMimeTypeHeader()}`;\n    }\n    return \"\";\n  }\n\n  generateOtherPostData() {\n    const postDataParams = this.params.filter(\n      (param) => param.in === \"postData\"\n    );\n    let postDataCode = \"\";\n    postDataParams.forEach((param) => {\n      postDataCode += `\"${param.name}=${param.value}&\"`;\n    });\n    if (postDataCode) {\n      postDataCode = postDataCode.slice(0, -1);\n      return `-Body \"${postDataCode}\" ${this.generateMimeTypeHeader()}`;\n    }\n    return \"\";\n  }\n\n  generateCookie() {\n    const cookieParams = this.params.filter((param) => param.in === \"cookie\");\n    let cookieCode = \"\";\n    cookieParams.forEach((param) => {\n      cookieCode += `-Cookie \"${param.name}=${param.value}\";`;\n    });\n    return cookieCode;\n  }\n}\n\nexport default PowerShellWebRequestGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nexport class PowerShellRestMethodGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `$response = Invoke-RestMethod -Uri \"${this.baseUrl}${url}\" -ContentType \"${this.mimeType}\" -Method ${this.method}\\n`;\n  }\n\n  generateFooterFile(url) {\n    return ``;\n  }\n\n  generateMimeTypeHeader() {\n    return '';\n  }\n\n  generateHeaders() {\n    let headers = '';\n    this.params\n      .filter((param) => param.in === 'headers')\n      .forEach((param) => {\n        headers += ` -Headers @{${param.name}='${param.value}'}\\n`;\n      });\n    return headers;\n  }\n\n  generateQueryParams() {\n    let queryParams = '';\n    this.params\n      .filter((param) => param.in === 'query')\n      .forEach((param) => {\n        queryParams += ` -Query @{${param.name}='${param.value}'}\\n`;\n      });\n    return queryParams;\n  }\n\n  generateJsonPostData() {\n    let jsonData = '';\n    this.params\n      .filter((param) => param.in === 'postData')\n      .forEach((param) => {\n        if (param.type === 'file') {\n          jsonData += ` -Body (Get-Content \"${param.path}\" -Raw | ConvertFrom-Json)\\n`;\n        } else {\n          jsonData += ` -Body '${param.value}'\\n`;\n        }\n      });\n    return jsonData;\n  }\n\n  generateMultipartPostData() {\n    let multipartData = '';\n    this.params\n      .filter((param) => param.in === 'postData')\n      .forEach((param) => {\n        if (param.type === 'file') {\n          multipartData += ` -Form @{${param.name}=(Get-Item \"${param.path}\").OpenRead()}\\n`;\n        } else {\n          multipartData += ` -Form @{${param.name}='${param.value}'}\\n`;\n        }\n      });\n    return multipartData;\n  }\n\n  generateOtherPostData() {\n    let otherData = '';\n    this.params\n      .filter((param) => param.in === 'postData')\n      .forEach((param) => {\n        otherData += ` -Body '${param.value}'\\n`;\n      });\n    return otherData;\n  }\n\n  generateCookie() {\n    let cookieData = '';\n    this.params\n      .filter((param) => param.in === 'cookie')\n      .forEach((param) => {\n        cookieData += ` -Headers @{Cookie='${param.name}=${param.value};'}\\n`;\n      });\n    return cookieData;\n  }\n}\n\nexport default PowerShellRestMethodGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nexport class RGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `\n      const requestOptions = {\n        method: '${this.method}',\n        headers: {\n          'Content-Type': '${this.mimeType || ''}',\n          ${this.hasHeadersParams() ? this.generateHeaders() : ''}\n        }\n      };\n\n      fetch('${this.baseUrl}${url}', requestOptions)\n        .then(response => response.json())\n        .then(data => console.log(data))\n        .catch(error => console.error(error));\n    `;\n  }\n\n  generateFooterFile(url) {\n    return '';\n  }\n\n  generateMimeTypeHeader() {\n    return '';\n  }\n\n  generateHeaders() {\n    return this.params\n      .filter(param => param.in === 'headers')\n      .map(param => `'${param.name}': '${param.value}'`)\n      .join(',\\n');\n  }\n\n  generateQueryParams() {\n    const queryParams = this.params.filter(param => param.in === 'query');\n\n    if (queryParams.length === 0) {\n      return '';\n    }\n\n    const queryString = queryParams.map(param => `${param.name}=${param.value}`).join('&');\n\n    return `const url = '${this.baseUrl}${this.url}?${queryString}';\\n`;\n  }\n\n  generateJsonPostData() {\n    const postData = this.params.find(param => param.in === 'postData');\n    return `const data = ${postData.value};\\n`;\n  }\n\n  generateMultipartPostData() {\n    const boundary = '----WebKitFormBoundary7MA4YWxkTrZu0gW';\n    const contentType = `multipart/form-data; boundary=${boundary}`;\n\n    let body = '';\n\n    this.params.filter(param => param.in === 'postData').forEach(param => {\n      body += `--${boundary}\\r\\n`;\n      body += `Content-Disposition: form-data; name=\"${param.name}\"\\r\\n`;\n      body += '\\r\\n';\n      body += `${param.value}\\r\\n`;\n    });\n\n    body += `--${boundary}--\\r\\n`;\n\n    return `const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': '${contentType}'\n    },\n    body: '${body}'\n  };\\n`;\n  }\n\n  generateOtherPostData() {\n    const postData = this.params.find(param => param.in === 'postData');\n    return `const data = '${postData.value}';\\n`;\n  }\n\n  generateCookie() {\n    const cookieParams = this.params.filter(param => param.in === 'cookie');\n    const cookieString = cookieParams.map(param => `${param.name}=${param.value}`).join('; ');\n\n    return `requestOptions.headers.Cookie = '${cookieString}';\\n`;\n  }\n}\n\nexport default RGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nexport class RubyGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `require 'net/http'\nrequire 'uri'\n\nuri = URI.parse('${this.baseUrl}${url}')\n`;\n  }\n\n  generateFooterFile(url) {\n    return '';\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === 'multipart/form-data') {\n      return \"request['Content-Type'] = 'multipart/form-data'\"\n    } else if (this.mimeType === 'application/json') {\n      return \"request['Content-Type'] = 'application/json'\"\n    } else {\n      return '';\n    }\n  }\n\n  generateHeaders() {\n    let headers = '';\n\n    this.params.filter(param => param.in === 'headers').forEach(param => {\n      headers += `request['${param.name}'] = '${param.value}'\\n`;\n    });\n\n    return headers;\n  }\n\n  generateQueryParams() {\n    let queryParams = '';\n\n    this.params.filter(param => param.in === 'query').forEach((param, index) => {\n      if (index === 0) {\n        queryParams += '?'\n      } else {\n        queryParams += '&'\n      }\n      queryParams += `${param.name}=${param.value}`;\n    });\n\n    return queryParams;\n  }\n\n  generateJsonPostData() {\n    let postData = '{';\n\n    this.params.filter(param => param.in === 'postData').forEach((param, index) => {\n      if (index > 0) {\n        postData += ','\n      }\n      postData += `\"${param.name}\": \"${param.value}\"`;\n    });\n\n    postData += '}';\n\n    return `request.body = '${postData}'\\n`;\n  }\n\n  generateMultipartPostData() {\n    const boundary = '----WebKitFormBoundary7MA4YWxkTrZu0gW';\n    const contentType = `multipart/form-data; boundary=${boundary}`;\n\n    let body = '';\n\n    this.params.filter(param => param.in === 'postData').forEach(param => {\n      if (param.type === 'file') {\n        body += `--${boundary}\\r\\n`;\n        body += `Content-Disposition: form-data; name=\"${param.name}\"; filename=\"${param.path}\"\\r\\n`;\n        body += `Content-Type: ${contentType}\\r\\n`;\n        body += '\\r\\n';\n        body += 'file content';\n        body += '\\r\\n';\n      } else {\n        body += `--${boundary}\\r\\n`;\n        body += `Content-Disposition: form-data; name=\"${param.name}\"\\r\\n`;\n        body += '\\r\\n';\n        body += `${param.value}\\r\\n`;\n      }\n    });\n\n    body += `--${boundary}--\\r\\n`;\n\n    return `request.body = '${body}'\\n`;\n  }\n\n  generateOtherPostData() {\n    let postData = '';\n\n    this.params.filter(param => param.in === 'postData').forEach((param, index) => {\n      if (index > 0) {\n        postData += '&'\n      }\n      postData += `${param.name}=${param.value}`;\n    });\n\n    return `request.body = '${postData}'\\n`;\n  }\n\n  generateCookie() {\n    let cookie = '';\n\n    this.params.filter(param => param.in === 'cookie').forEach(param => {\n      cookie += `request['Cookie'] = '${param.name}=${param.value}'\\n`;\n    });\n\n    return cookie;\n  }\n}\n\nexport default RubyGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass RustGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `use reqwest::header;\nuse std::collections::HashMap;\n\nfn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::blocking::Client::new();\n    let mut headers = header::HeaderMap::new();\n    let mut url = \"${this.baseUrl}${url}\".to_string();\n`;\n  }\n\n  generateFooterFile(url) {\n    return `\\n    let response = client.${this.method.toLowerCase()}(&url)\n        .headers(headers)\n        .send()?;\n    println!(\"Status: {{}}\", response.status());\n    Ok(())\n}`;\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === 'application/json') {\n      return `    headers.insert(header::CONTENT_TYPE, header::HeaderValue::from_static(\"application/json\"));`;\n    } else if (this.mimeType === 'multipart/form-data') {\n      return `    headers.insert(header::CONTENT_TYPE, header::HeaderValue::from_static(\"multipart/form-data\"));`;\n    } else {\n      return `    headers.insert(header::CONTENT_TYPE, header::HeaderValue::from_static(\"application/x-www-form-urlencoded\"));`;\n    }\n  }\n\n  generateHeaders() {\n    const headerParams = this.params.filter(param => param.in === 'headers');\n    let headersCode = '';\n    headerParams.forEach(param => {\n      headersCode += `    headers.insert(header::HeaderName::from_static(\"${param.name}\"), header::HeaderValue::from_static(\"${param.value}\"));\\n`;\n    });\n    return headersCode;\n  }\n\n  generateQueryParams() {\n    const queryParams = this.params.filter(param => param.in === 'query');\n    let queryParamsCode = '';\n    queryParams.forEach(param => {\n      queryParamsCode += `    url = url.replace(\"{${param.name}}\", &${param.value}.to_string());\\n`;\n    });\n    return queryParamsCode;\n  }\n\n  generateJsonPostData() {\n    const postDataParams = this.params.filter(param => param.in === 'postData');\n    let postDataCode = `    let data = json::json!({\\n`;\n    postDataParams.forEach(param => {\n      postDataCode += `        \"${param.name}\": ${param.value},\\n`;\n    });\n    postDataCode += `    });\\n`;\n    postDataCode += `    let body = serde_json::to_string(&data)?;\\n`;\n    postDataCode += `    let request = client.${this.method.toLowerCase()}(&url)\\n`;\n    postDataCode += `        .headers(headers)\\n`;\n    postDataCode += `        .body(body)\\n`;\n    postDataCode += `        .send()?;\\n`;\n    return postDataCode;\n  }\n\n  generateMultipartPostData() {\n    const postDataParams = this.params.filter(param => param.in === 'postData');\n    let postDataCode = `    let mut form = reqwest::multipart::Form::new();\\n`;\n    postDataParams.forEach(param => {\n      if (param.type === 'file' && param.path) {\n        postDataCode += `    let file = std::fs::File::open(\"${param.path}\")?;\\n`;\n        postDataCode += `    let field = reqwest::multipart::Part::stream(reqwest::Body::wrap_stream(file)).file_name(\"${param.name}\");\\n`;\n        postDataCode += `    form = form.part(\"${param.name}\", field);\\n`;\n      } else {\n        postDataCode += `    form = form.text(\"${param.name}\", ${param.value});\\n`;\n      }\n    });\n    postDataCode += `    let response = client.${this.method.toLowerCase()}(&url)\\n`;\n    postDataCode += `        .headers(headers)\\n`;\n    postDataCode += `        .multipart(form)\\n`;\n    postDataCode += `        .send()?;\\n`;\n    return postDataCode;\n  }\n\n  generateOtherPostData() {\n    const postDataParams = this.params.filter(param => param.in === 'postData');\n    let postDataCode = `    let mut data = HashMap::new();\\n`;\n    postDataParams.forEach(param => {\n      postDataCode += `    data.insert(\"${param.name}\", ${param.value});\\n`;\n    });\n    postDataCode += `    let request = client.${this.method.toLowerCase()}(&url)\\n`;\n    postDataCode += `        .headers(headers)\\n`;\n    postDataCode += `        .form(&data)\\n`;\n    postDataCode += `        .send()?;\\n`;\n    return postDataCode;\n  }\n\n  generateCookie() {\n    const cookieParams = this.params.filter(param => param.in === 'cookie');\n    let cookieCode = `    let mut cookie = String::new();\n  `;\n    cookieParams.forEach(param => {\n      cookieCode += `    cookie.push_str(\"${param.name}=${param.value}; \");\n    `;\n    });\n    cookieCode += `    headers.insert(header::COOKIE, header::HeaderValue::from_str(&cookie[..cookie.len() - 2])?);\n  `;\n    return cookieCode;\n  }\n}\n\nexport default RustGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass SwiftGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `import Foundation\\n\\n`;\n  }\n\n  generateFooterFile(url) {\n    return `let url = URL(string: \"${this.baseUrl}${url}\")!\\n`;\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === 'application/json') {\n      return `request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\\n`;\n    } else if (this.mimeType === 'multipart/form-data') {\n      return `request.setValue(\"multipart/form-data\", forHTTPHeaderField: \"Content-Type\")\\n`;\n    } else {\n      return `request.setValue(\"${this.mimeType}\", forHTTPHeaderField: \"Content-Type\")\\n`;\n    }\n  }\n\n  generateHeaders() {\n    let code = '';\n\n    this.params\n      .filter(param => param.in === 'headers')\n      .forEach(param => {\n        code += `request.setValue(\"${param.value}\", forHTTPHeaderField: \"${param.name}\")\\n`;\n      });\n\n    return code;\n  }\n\n  generateQueryParams() {\n    let code = '';\n\n    this.params\n      .filter(param => param.in === 'query')\n      .forEach(param => {\n        code += `let ${param.name} = \"${param.value}\"\\n`;\n      });\n\n    return code;\n  }\n\n  generateJsonPostData() {\n    let code = '';\n\n    code += `let postData = try! JSONSerialization.data(withJSONObject: [`;\n\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach((param, index) => {\n        code += `\"${param.name}\": \"${param.value}\"`;\n\n        if (index !== this.params.filter(p => p.in === 'postData').length - 1) {\n          code += ', ';\n        }\n      });\n\n    code += `])\\n`;\n    code += `request.httpBody = postData\\n`;\n\n    return code;\n  }\n\n  generateMultipartPostData() {\n    let code = '';\n\n    code += `let boundary = UUID().uuidString\\n`;\n    code += `request.setValue(\"multipart/form-data; boundary=\\\\(boundary)\", forHTTPHeaderField: \"Content-Type\")\\n`;\n    code += `let httpBody = NSMutableData()\\n`;\n\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        if (param.type === 'file') {\n          code += `let filePath = \"${param.path}\"\\n`;\n          code += `let filename = \"${param.value}\"\\n`;\n          code += `let fileData = try! Data(contentsOf: URL(fileURLWithPath: filePath))\\n`;\n          code += `let mimetype = \"application/octet-stream\"\\n`;\n          code += `httpBody.append(\"--\\\\(boundary)\\\\r\\\\n\".data(using: .utf8)!)\\n`;\n          code += `httpBody.append(\"Content-Disposition: form-data; name=\\\\\"${param.name}\\\\\"; filename=\\\\\"\\\\(filename)\\\\\"\\\\r\\\\n\".data(using: .utf8)!)\\n`;\n          code += `httpBody.append(\"Content-Type: \\\\(mimetype)\\\\r\\\\n\\\\r\\\\n\".data(using: .utf8)!)\\n`;\n          code += `httpBody.append(fileData)\\n`;\n        } else {\n          code += `httpBody.append(\"--\\\\(boundary)\\\\r\\\\n\".data(using: .utf8)!)\\n`;\n          code += `httpBody.append(\"Content-Disposition: form-data; name=\\\\\"${param.name}\\\\\"\\\\r\\\\n\\\\r\\\\n\".data(using: .utf8)!)\\n`;\n          code += `httpBody.append(\"${param.value}\".data(using: .utf8)!)\\n`;\n        }\n      });\n\n    code += `httpBody.append(\"\\\\r\\\\n--\\\\(boundary)--\\\\r\\\\n\".data(using: .utf8)!)\\n`;\n    code += `request.httpBody = httpBody as Data\\n`;\n\n    return code;\n  }\n\n  generateOtherPostData() {\n    let code = '';\n\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        code += `let ${param.name} = \"${param.value}\"\\n`;\n      });\n\n    code += `let postData = ${this.params.filter(param => param.in === 'postData').map(param => param.name).join(' + ')}\\n`;\n    code += `request.httpBody = postData.data(using: .utf8)\\n`;\n\n    return code;\n  }\n\n  generateCookie() {\n    let code = '';\n\n    this.params\n      .filter(param => param.in === 'cookie')\n      .forEach(param => {\n        code += `request.setValue(\"${param.value}\", forHTTPHeaderField: \"Cookie\")\\n`;\n      });\n\n    return code;\n  }\n}\n\nexport default SwiftGenerator;\n","import CodeGenerator, {Param} from \"./_CodeGenerator\";\n\nclass BrainfuckGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return '';\n  }\n\n  generateFooterFile(url) {\n    return '';\n  }\n\n  generateMimeTypeHeader() {\n    return '';\n  }\n\n  generateHeaders() {\n    return '';\n  }\n\n  generateQueryParams() {\n    return '';\n  }\n\n  generateJsonPostData() {\n    return '';\n  }\n\n  generateMultipartPostData() {\n    return '';\n  }\n\n  generateOtherPostData() {\n    return '';\n  }\n\n  generateCookie() {\n    return '';\n  }\n\n  generateLoopStart() {\n    return '[';\n  }\n\n  generateLoopEnd() {\n    return ']';\n  }\n\n  generateMovePointer(amount) {\n    if (amount > 0) {\n      return '+'.repeat(amount);\n    } else if (amount < 0) {\n      return '-'.repeat(-amount);\n    } else {\n      return '';\n    }\n  }\n\n  generateAddValue(amount) {\n    if (amount > 0) {\n      return '>'.repeat(amount) + '+';\n    } else if (amount < 0) {\n      return '>'.repeat(-amount) + '-';\n    } else {\n      return '';\n    }\n  }\n\n  generateOutputValue() {\n    return '.';\n  }\n\n  generateInputValue() {\n    return ',';\n  }\n\n  generateComment(comment) {\n    return `; ${comment}\\n`;\n  }\n\n  generateBrainfuckCodeForParam(param) {\n    switch (param.in) {\n      case 'path':\n        return this.generateComment(`Path parameter: ${param.name}`);\n      case 'query':\n        return this.generateComment(`Query parameter: ${param.name}`);\n      case 'postData':\n        return this.generateComment(`Post data parameter: ${param.name}`);\n      case 'headers':\n        return this.generateComment(`Header parameter: ${param.name}`);\n      case 'cookie':\n        return this.generateComment(`Cookie parameter: ${param.name}`);\n      default:\n        return '';\n    }\n  }\n\n  generateBrainfuckCodeForUrl(url) {\n    let code = '';\n    for (let i = 0; i < url.length; i++) {\n      const charCode = url.charCodeAt(i);\n      code += this.generateAddValue(charCode) + this.generateOutputValue();\n    }\n    return code;\n  }\n\n  generateCode() {\n    let url = this.url;\n\n    this.params\n      .filter(param => param.in === 'path')\n      .forEach(param => {\n        url = url.replace(`{${param.name}}`, param.value)\n      });\n\n    let code = '';\n\n    // Generate Brainfuck code for URL\n    const urlCode = this.generateBrainfuckCodeForUrl(this.baseUrl + url);\n    code += this.generateComment('------ URL ------\\n');\n    code += urlCode;\n    code += '\\n\\n';\n\n    // Generate Brainfuck code for parameters\n    this.params.forEach(param => {\n      const paramCode = this.generateBrainfuckCodeForParam(param);\n      code += paramCode;\n    });\n\n    return code;\n  }\n}\n\nexport default BrainfuckGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass ArduinoGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `#include <WiFi.h>\n#include <HTTPClient.h>\n\nconst char* ssid = \"your_SSID\";\nconst char* password = \"your_PASSWORD\";\n\nvoid setup() {\n  Serial.begin(115200);\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);\n    Serial.println(\"Connecting to WiFi...\");\n  }\n  Serial.println(\"WiFi connected\");\n}\n\nvoid loop() {\n  HTTPClient http;\n  http.begin(\"${this.baseUrl}${url}\");\n`;\n  }\n\n  generateFooterFile(url) {\n    return `  http.end();\n}\\n`;\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === 'application/json') {\n      return `  http.addHeader(\"Content-Type\", \"application/json\");\\n`;\n    } else if (this.mimeType === 'multipart/form-data') {\n      return `  http.addHeader(\"Content-Type\", \"multipart/form-data\");\\n`;\n    } else {\n      return '';\n    }\n  }\n\n  generateHeaders() {\n    let headersCode = '';\n    this.params\n      .filter(param => param.in === 'headers')\n      .forEach(param => {\n        headersCode += `  http.addHeader(\"${param.name}\", \"${param.value}\");\\n`;\n      });\n    return headersCode;\n  }\n\n  generateQueryParams() {\n    let queryParams = '';\n    this.params\n      .filter(param => param.in === 'query')\n      .forEach(param => {\n        queryParams += `  http.addQueryParameter(\"${param.name}\", \"${param.value}\");\\n`;\n      });\n    return queryParams;\n  }\n\n  generateJsonPostData() {\n    let jsonData = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        if (param.type === 'file') {\n          jsonData += `  // File upload not supported in JSON data\\n`;\n        } else {\n          jsonData += `  StaticJsonDocument<200> doc;\\n`;\n          jsonData += `  doc[\"${param.name}\"] = \"${param.value}\";\\n`;\n          jsonData += `  String json;\\n`;\n          jsonData += `  serializeJson(doc, json);\\n`;\n          jsonData += `  http.sendRequest(\"POST\", json);\\n`;\n        }\n      });\n    return jsonData;\n  }\n\n  generateMultipartPostData() {\n    let multipartData = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        if (param.type === 'file') {\n          multipartData += `  http.addFileToUpload(\"${param.path}\", \"${param.name}\");\\n`;\n        } else {\n          multipartData += `  http.addFormField(\"${param.name}\", \"${param.value}\");\\n`;\n        }\n      });\n    return multipartData;\n  }\n\n  generateOtherPostData() {\n    let postData = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        postData += `  http.addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\\n`;\n        postData += `  String data = \"${param.name}=${param.value}\";\\n`;\n        postData += `  http.sendRequest(\"POST\", data);\\n`;\n      });\n    return postData;\n  }\n\n  generateCookie() {\n    let cookieCode = '';\n    this.params\n      .filter(param => param.in === 'cookie')\n      .forEach(param => {\n        cookieCode += `  http.addHeader(\"Cookie\", \"${param.name}=${param.value}\");\\n`;\n      });\n    return cookieCode;\n  }\n}\n\nexport default ArduinoGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass PhpHttp1Generator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `\n      <?php\n      $ch = curl_init('${this.baseUrl}${url}');\n      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n      curl_setopt($ch, CURLOPT_CUSTOMREQUEST, '${this.method}');\n    `;\n  }\n\n  generateFooterFile(url) {\n    return `\n      $response = curl_exec($ch);\n      curl_close($ch);\n      echo $response;\n      ?>\n    `;\n  }\n\n  generateMimeTypeHeader() {\n    switch (this.mimeType) {\n      case 'application/json':\n        return \"curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));\";\n      case 'multipart/form-data':\n        return \"curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: multipart/form-data'));\";\n      case 'application/x-www-form-urlencoded':\n      default:\n        return \"curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded'));\";\n    }\n  }\n\n  generateHeaders() {\n    const headers = this.params.filter((param) => param.in === 'headers');\n    const headersString = headers\n      .map((header) => `'${header.name}: ${header.value}'`)\n      .join(', ');\n    return `curl_setopt($ch, CURLOPT_HTTPHEADER, array(${headersString}));`;\n  }\n\n  generateQueryParams() {\n    const queryParams = this.params.filter((param) => param.in === 'query');\n    const queryString = queryParams\n      .map((param) => `${param.name}=${param.value}`)\n      .join('&');\n    return `curl_setopt($ch, CURLOPT_URL, '${this.baseUrl}${this.url}?${queryString}');`;\n  }\n\n  generateJsonPostData() {\n    const postData = this.params.find((param) => param.in === 'postData');\n    return `curl_setopt($ch, CURLOPT_POSTFIELDS, '${postData.value}');`;\n  }\n\n  generateMultipartPostData() {\n    const postData = this.params.find((param) => param.in === 'postData');\n    const path = postData.path || '';\n    return `\n      $postFields = array(\n        '${postData.name}' => new CURLFile('${path}')\n      );\n      curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);\n    `;\n  }\n\n  generateOtherPostData() {\n    const postData = this.params.find((param) => param.in === 'postData');\n    return `curl_setopt($ch, CURLOPT_POSTFIELDS, '${postData.value}');`;\n  }\n\n  generateCookie() {\n    const cookieParams = this.params.filter((param) => param.in === 'cookie');\n    const cookieString = cookieParams\n      .map((cookie) => `${cookie.name}=${cookie.value}`)\n      .join('; ');\n    return `curl_setopt($ch, CURLOPT_COOKIE, '${cookieString}');`;\n  }\n}\n\nexport default PhpHttp1Generator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass PhpHttp2Generator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `<?php\nuse Http2\\Headers;\nuse Http2\\Request;\nuse Http2\\TransportException;\nuse Http2\\Client;\nuse Http2\\Request\\Method;\n\nrequire_once 'vendor/autoload.php';\n\n$client = new Client();\n\n$request = new Request(\n  Method::${this.method},\n  '${this.baseUrl}${url}'\n);`\n  }\n\n  generateFooterFile(url) {\n    return `\ntry {\n  $response = $client->send($request);\n  echo $response->getBody();\n} catch (TransportException $e) {\n  echo $e->getMessage();\n}\n?>`\n  }\n\n  generateMimeTypeHeader() {\n    let mimeTypeHeader = '';\n    if (this.mimeType === 'application/json') {\n      mimeTypeHeader = `$request->setHeader(Headers::CONTENT_TYPE, 'application/json');`;\n    } else if (this.mimeType === 'multipart/form-data') {\n      mimeTypeHeader = `$request->setHeader(Headers::CONTENT_TYPE, 'multipart/form-data');`;\n    } else if (this.mimeType === 'application/x-www-form-urlencoded') {\n      mimeTypeHeader = `$request->setHeader(Headers::CONTENT_TYPE, 'application/x-www-form-urlencoded');`;\n    }\n    return mimeTypeHeader;\n  }\n\n  generateHeaders() {\n    let headers = '';\n    this.params\n      .filter(param => param.in === 'headers')\n      .forEach(param => {\n        headers += `$request->setHeader('${param.name}', '${param.value}');\\n`;\n      });\n    return headers;\n  }\n\n  generateQueryParams() {\n    let queryParams = '';\n    this.params\n      .filter(param => param.in === 'query')\n      .forEach((param, index) => {\n        if (index === 0) {\n          queryParams += `$request->setUri('${this.baseUrl}${this.url}?${param.name}=${param.value}'`;\n        } else {\n          queryParams += `)->setQueryParam('${param.name}', '${param.value}')`;\n        }\n      });\n    return queryParams + ');\\n';\n  }\n\n  generateJsonPostData() {\n    let jsonData = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        jsonData += `'${param.name}': '${param.value}',\\n`;\n      });\n    return `$request->setBody(json_encode({${jsonData}}));\\n`;\n  }\n\n  generateMultipartPostData() {\n    let multipartData = '';\n    this.params\n      .filter(param => param.in === 'postData' && param.type === 'file')\n      .forEach(param => {\n        multipartData += `$request->addMultipartData('${param.name}', '${param.path}');\\n`;\n      });\n    this.params\n      .filter(param => param.in === 'postData' && param.type !== 'file')\n      .forEach(param => {\n        multipartData += `$request->addMultipartData('${param.name}', '${param.value}');\\n`;\n      });\n    return multipartData;\n  }\n\n  generateOtherPostData() {\n    let postData = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        postData += `'${param.name}': '${param.value}',\\n`;\n      });\n    return `$request->setBody(http_build_query(array(${postData})), false);\\n`;\n  }\n\n  generateCookie() {\n    let cookieData = '';\n    this.params\n      .filter(param => param.in === 'cookie')\n      .forEach(param => {\n        cookieData += `$request->setCookie('${param.name}', '${param.value}');\\n`;\n      });\n    return cookieData;\n  }\n}\n\nexport default PhpHttp2Generator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass JavaScriptTypescriptGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `import axios, { AxiosRequestConfig } from 'axios';\n\nconst url = '${this.baseUrl}${url}';\nconst config: AxiosRequestConfig = {\n  method: '${this.method}',\n`;\n  }\n\n  generateFooterFile(url) {\n    return `\n};\n\naxios(url, config)\n  .then((response) => {\n    console.log(response.data);\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n`;\n  }\n\n  generateMimeTypeHeader() {\n    let headers = '';\n    switch (this.mimeType) {\n      case 'application/json':\n        headers = `'Content-Type': 'application/json',`;\n        break;\n      case 'multipart/form-data':\n        headers = `'Content-Type': 'multipart/form-data',`;\n        break;\n      case 'application/x-www-form-urlencoded':\n        headers = `'Content-Type': 'application/x-www-form-urlencoded',`;\n        break;\n      default:\n        headers = '';\n    }\n    return headers;\n  }\n\n  generateHeaders() {\n    const headers = this.params\n      .filter(param => param.in === 'headers')\n      .map(param => `'${param.name}': '${param.value}',`)\n      .join('\\n  ');\n    return headers;\n  }\n\n  generateQueryParams() {\n    const params = this.params\n      .filter(param => param.in === 'query')\n      .map(param => `'${param.name}': '${param.value}',`)\n      .join('\\n  ');\n    return `params: {\n  ${params}\n},`;\n  }\n\n  generateJsonPostData() {\n    const data = this.params\n      .filter(param => param.in === 'postData')\n      .map(param => `'${param.name}': '${param.value}',`)\n      .join('\\n  ');\n    return `data: {\n  ${data}\n},`;\n  }\n\n  generateMultipartPostData() {\n    const data = this.params\n      .filter(param => param.in === 'postData' && param.type === 'file')\n      .map(param => `{\n  name: '${param.name}',\n  filename: '${param.path}',\n  data: fs.readFileSync('${param.path}'),\n},`)\n      .join('\\n  ');\n    return `data: [\n  ${data}\n],`;\n  }\n\n  generateOtherPostData() {\n    const data = this.params\n      .filter(param => param.in === 'postData')\n      .map(param => `'${param.name}': '${param.value}',`)\n      .join('\\n  ');\n    return `data: {\n  ${data}\n},`;\n  }\n\n  generateCookie() {\n    const cookies = this.params\n      .filter(param => param.in === 'cookie')\n      .map(param => `${param.name}=${param.value}`)\n      .join(';');\n    return `withCredentials: true,\nheaders: {\n  'Cookie': '${cookies}',\n},`;\n  }\n}\n\nexport default JavaScriptTypescriptGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass ObjectCGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"${this.baseUrl}${url}\"]];\n`;\n  }\n\n  generateFooterFile(url) {\n    return `NSURLSessionDataTask *task = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n    // handle response\n}];\n[task resume];`;\n  }\n\n  generateMimeTypeHeader() {\n    return `NSString *contentType = @\"${this.mimeType}\";\n[request setValue:contentType forHTTPHeaderField:@\"Content-Type\"];\n`;\n  }\n\n  generateHeaders() {\n    let headers = '';\n    this.params\n      .filter(param => param.in === 'headers')\n      .forEach(param => {\n        headers += `[request setValue:@\"${param.value}\" forHTTPHeaderField:@\"${param.name}\"];\n`;\n      });\n    return headers;\n  }\n\n  generateQueryParams() {\n    let queryParams = '';\n    let isFirst = true;\n    this.params\n      .filter(param => param.in === 'query')\n      .forEach(param => {\n        if (isFirst) {\n          queryParams += `[url appendString:@\"?${param.name}=${param.value}\"];\n`;\n          isFirst = false;\n        } else {\n          queryParams += `[url appendString:@\"&${param.name}=${param.value}\"];\n`;\n        }\n      });\n    return queryParams;\n  }\n\n  generateJsonPostData() {\n    return `NSData *postData = [NSJSONSerialization dataWithJSONObject:${JSON.stringify(this.getPostDataParamsValues())} options:NSJSONWritingPrettyPrinted error:&error];\n[request setHTTPBody:postData];\n`;\n  }\n\n  generateMultipartPostData() {\n    return `NSData *postData = [self createMultipartFormData:${JSON.stringify(this.getPostDataParamsValues())}];\n[request setHTTPBody:postData];\n`;\n  }\n\n  generateOtherPostData() {\n    let postData = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        postData += `[request setHTTPBody:[@\"${param.value}\" dataUsingEncoding:NSUTF8StringEncoding]];\n`;\n      });\n    return postData;\n  }\n\n  generateCookie() {\n    let cookieParams = '';\n    this.params\n      .filter(param => param.in === 'cookie')\n      .forEach(param => {\n        cookieParams += `[request addValue:@\"${param.value}\" forHTTPHeaderField:@\"Cookie\"];\n`;\n      });\n    return cookieParams;\n  }\n\n  getPostDataParamsValues() {\n    let postDataParams = {};\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        if (param.type === 'file') {\n          postDataParams[param.name] = `[NSURL fileURLWithPath:@\"${param.path}\"]`;\n        } else {\n          postDataParams[param.name] = param.value;\n        }\n      });\n    return postDataParams;\n  }\n}\n\nexport default ObjectCGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass CppGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nint main() {\n  CURL *curl;\n  CURLcode res;\n  std::string url = \"${this.baseUrl}${url}\";\n`;\n  }\n\n  generateFooterFile(url) {\n    return `\n  return 0;\n}`;\n  }\n\n  generateMimeTypeHeader() {\n    return `  curl_mime *mime = curl_mime_init(curl);\n  curl_mime_type(mime, \"${this.mimeType}\");\n  curl_easy_setopt(curl, CURLOPT_MIMEPOST, mime);\n`;\n  }\n\n  generateHeaders() {\n    let headers = '';\n    this.params\n      .filter(param => param.in === 'headers')\n      .forEach(param => {\n        headers += `  curl_slist *headers = nullptr;\n  headers = curl_slist_append(headers, \"${param.name}: ${param.value}\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n`;\n      });\n    return headers;\n  }\n\n  generateQueryParams() {\n    let queryParams = '';\n    this.params\n      .filter(param => param.in === 'query')\n      .forEach(param => {\n        queryParams += `  url += \"?${param.name}=${param.value}\";\n`;\n      });\n    return queryParams;\n  }\n\n  generateJsonPostData() {\n    let json = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        json += `\"${param.name}\": \"${param.value}\", `;\n      });\n    json = json.slice(0, -2);\n    return `  std::string data = \"{${json}}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data.c_str());\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, data.length());\n`;\n  }\n\n  generateMultipartPostData() {\n    let multipart = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        if (param.type === 'file' && param.path) {\n          multipart += `  curl_mimepart *part${param.name} = curl_mime_addpart(mime);\n  curl_mime_name(part${param.name}, \"${param.name}\");\n  curl_mime_filedata(part${param.name}, \"${param.path}\");\n`;\n        } else {\n          multipart += `  curl_mimepart *part${param.name} = curl_mime_addpart(mime);\n  curl_mime_name(part${param.name}, \"${param.name}\");\n  curl_mime_data(part${param.name}, \"${param.value}\", CURL_ZERO_TERMINATED);\n`;\n        }\n      });\n    return multipart;\n  }\n\n  generateOtherPostData() {\n    let postData = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        postData += `  std::string data = \"${param.name}=${param.value}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data.c_str());\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, data.length());\n`;\n      });\n    return postData;\n  }\n\n  generateCookie() {\n    let cookie = '';\n    this.params\n      .filter(param => param.in === 'cookie')\n      .forEach(param => {\n        cookie += `  curl_easy_setopt(curl, CURLOPT_COOKIE, \"${param.name}=${param.value}\");\n`;\n      });\n    return cookie;\n  }\n}\n\nexport default CppGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass DartGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `import 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nvoid main() async {\n  var url = '${this.baseUrl}${url}';\n`;\n  }\n\n  generateFooterFile(url) {\n    return `}\n`;\n  }\n\n  generateMimeTypeHeader() {\n    return `  var headers = {'Content-Type': '${this.mimeType}'};\n`;\n  }\n\n  generateHeaders() {\n    let headersCode = '';\n    this.params.filter(param => param.in === 'headers').forEach(param => {\n      headersCode += `  headers['${param.name}'] = '${param.value}';\n`;\n    });\n    return headersCode;\n  }\n\n  generateQueryParams() {\n    let queryParamsCode = '';\n    this.params.filter(param => param.in === 'query').forEach(param => {\n      queryParamsCode += `  url = Uri.parse(url).replace(queryParameters: {'${param.name}': '${param.value}'}).toString();\n`;\n    });\n    return queryParamsCode;\n  }\n\n  generateJsonPostData() {\n    let jsonData = {};\n    this.params.filter(param => param.in === 'postData').forEach(param => {\n      if (param.type === 'file') {\n        return `File type is not supported for Content-Type: ${this.mimeType}`;\n      } else {\n        jsonData[param.name] = param.value;\n      }\n    });\n    return `  var body = json.encode(${JSON.stringify(jsonData)});\n`;\n  }\n\n  generateMultipartPostData() {\n    return 'multipart/form-data is not supported yet';\n  }\n\n  generateOtherPostData() {\n    let postDataCode = '';\n    this.params.filter(param => param.in === 'postData').forEach(param => {\n      if (param.type === 'file') {\n        return `File type is not supported for Content-Type: ${this.mimeType}`;\n      } else {\n        postDataCode += `  var body = '${param.name}=${param.value}';\n`;\n      }\n    });\n    return postDataCode;\n  }\n\n  generateCookie() {\n    let cookieCode = '';\n    this.params.filter(param => param.in === 'cookie').forEach(param => {\n      cookieCode += `  headers['Cookie'] = '${param.name}=${param.value}';\n`;\n    });\n    return cookieCode;\n  }\n\n  generateCode() {\n    let url = this.url;\n\n    this.params\n      .filter(param => param.in === 'path')\n      .forEach(param => {\n        url = url.replace(`{${param.name}}`, param.value);\n      });\n\n    let fetchCode = this.generateHeaderFile(url);\n\n    if (this.hasCookieParams()) {\n      fetchCode += this.generateCookie();\n    }\n\n    if (this.hasMimeType()) {\n      fetchCode += this.generateMimeTypeHeader();\n    }\n\n    if (this.hasHeadersParams()) {\n      fetchCode += this.generateHeaders();\n    }\n\n    if (this.hasQueryParams()) {\n      fetchCode += this.generateQueryParams();\n    } else if (this.hasPostDataParams()) {\n      if (this.mimeType === 'application/json') {\n        fetchCode += this.generateJsonPostData();\n      } else if (this.mimeType === 'multipart/form-data') {\n        fetchCode += this.generateMultipartPostData();\n      } else {\n        fetchCode += this.generateOtherPostData();\n      }\n    }\n\n    fetchCode += `  var response = await http.${this.method.toLowerCase()}(url, headers: headers, body: body);\n\n  print(response.body);\n}`;\n\n    return fetchCode;\n  }\n}\n\nexport default DartGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nexport class ScalaGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `import scalaj.http.Http\nimport scalaj.http.HttpResponse\n\nobject Main {\ndef main(args: Array[String]): Unit = {\nval response: HttpResponse[String] = Http(\"${this.baseUrl}${url}\")`;\n  }\n\n  generateFooterFile(url) {\n    return `\\n     .asString     \\nprintln(response.body)\\n   } \\n}`;\n  }\n\n  generateMimeTypeHeader() {\n    if (this.mimeType === 'application/json') {\n      return `\\n     .header(\"Content-Type\", \"application/json\")`;\n    } else if (this.mimeType === 'multipart/form-data') {\n      return `\\n     .header(\"Content-Type\", \"multipart/form-data\")`;\n    } else {\n      return `\\n     .header(\"Content-Type\", \"application/x-www-form-urlencoded\")`;\n    }\n  }\n\n  generateHeaders() {\n    let headersCode = '';\n    this.params\n      .filter(param => param.in === 'headers')\n      .forEach(param => {\n        headersCode += `\\n     .header(\"${param.name}\", \"${param.value}\")\\n`;\n      });\n    return headersCode;\n  }\n\n  generateQueryParams() {\n    let queryParamsCode = '';\n    this.params\n      .filter(param => param.in === 'query')\n      .forEach(param => {\n        queryParamsCode += `\\n     .param('${param.name}', '${param.value}')\\n`;\n      });\n    return queryParamsCode;\n  }\n\n  generateJsonPostData() {\n    let postData = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        if (param.type === 'file') {\n          postData += `${param.name}=@${param.path}`\n        } else {\n          postData += `${param.name}=${param.value}`\n        }\n      });\n    return `\\n     .postData(${postData})`;\n  }\n\n  generateMultipartPostData() {\n    let postData = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        if (param.type === 'file') {\n          postData += `\\n     .postMulti(MultiPart(\"${param.name}\", \"${param.path}\"))`\n        } else {\n          postData += `\\n     .postMulti(MultiPart(\"${param.name}\", \"${param.value}\"))`\n        }\n      });\n    return postData;\n  }\n\n  generateOtherPostData() {\n    let postData = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        if (param.type === 'file') {\n          postData += `\\n     .postData((\"${param.name}\", \"${param.path}\"))`\n        } else {\n          postData += `\\n     .postData((\"${param.name}\", \"${param.value}\"))`\n        }\n      });\n    return postData;\n  }\n\n  generateCookie() {\n    let cookieCode = '';\n    this.params\n      .filter(param => param.in === 'cookie')\n      .forEach(param => {\n        cookieCode += `\\n     .cookie(\"${param.name}\", \"${param.value}\")\\n`;\n      });\n    return cookieCode;\n  }\n}\n\nexport default ScalaGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nclass LuaGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    return `-- ${this.method} ${this.baseUrl}${url}\\n`;\n  }\n\n  generateFooterFile() {\n    return '';\n  }\n\n  generateMimeTypeHeader() {\n    return '';\n  }\n\n  generateHeaders() {\n    let headers = '';\n    this.params\n      .filter(param => param.in === 'headers')\n      .forEach(param => {\n        headers += `${param.name}: ${param.value}\\n`;\n      });\n    return headers;\n  }\n\n  generateQueryParams() {\n    let queryParams = '';\n    this.params\n      .filter(param => param.in === 'query')\n      .forEach(param => {\n        queryParams += `${param.name}=${param.value}&`;\n      });\n    queryParams = queryParams.slice(0, -1);\n    return queryParams;\n  }\n\n  generateJsonPostData() {\n    let data = '{';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        data += `\"${param.name}\": \"${param.value}\",`;\n      });\n    data = data.slice(0, -1);\n    data += '}';\n    return data;\n  }\n\n  generateMultipartPostData() {\n    return 'Not implemented for Lua';\n  }\n\n  generateOtherPostData() {\n    let data = '';\n    this.params\n      .filter(param => param.in === 'postData')\n      .forEach(param => {\n        data += `${param.value}\\n`;\n      });\n    return data;\n  }\n\n  generateCookie() {\n    let cookie = '';\n    this.params\n      .filter(param => param.in === 'cookie')\n      .forEach(param => {\n        cookie += `${param.name}=${param.value}; `;\n      });\n    cookie = cookie.slice(0, -2);\n    return `Cookie: ${cookie}\\n`;\n  }\n\n  generateCode() {\n    let url = this.url;\n\n    this.params\n      .filter(param => param.in === 'path')\n      .forEach(param => {\n        url = url.replace(`{${param.name}}`, param.value)\n      });\n\n    let fetchCode = this.generateHeaderFile(url);\n\n    if (this.hasCookieParams()) {\n      fetchCode += this.generateCookie();\n    }\n\n    if (this.hasHeadersParams()) {\n      fetchCode += this.generateHeaders();\n    }\n\n    if (this.hasQueryParams()) {\n      url += `?${this.generateQueryParams()}`;\n    } else if (this.hasPostDataParams()) {\n      if (this.mimeType === 'application/json') {\n        fetchCode += `Content-Type: application/json\\n`;\n        fetchCode += `Content-Length: ${this.generateJsonPostData().length}\\n\\n`;\n        fetchCode += `${this.generateJsonPostData()}`;\n      } else {\n        fetchCode += `Content-Type: ${this.mimeType}\\n\\n`;\n        fetchCode += `${this.generateOtherPostData()}`;\n      }\n    }\n\n    fetchCode += this.generateFooterFile();\n\n    return fetchCode;\n  }\n}\n\nexport default LuaGenerator;\n","import CodeGenerator from \"./_CodeGenerator\";\n\nexport class PerlGenerator extends CodeGenerator {\n  generateHeaderFile(url) {\n    let code = '#!/usr/bin/perl\\n';\n    code += 'use LWP::UserAgent;\\n';\n    code += `my $url = \"${this.baseUrl}${url}\";\\n`;\n    code += `my $method = \"${this.method.toLowerCase()}\";\\n`;\n    code += 'my $ua = LWP::UserAgent->new();\\n';\n    return code;\n  }\n\n  generateFooterFile(url) {\n    let code = '';\n    code += 'my $response = $ua->request($request);\\n';\n    code += 'print $response->content();\\n';\n    return code;\n  }\n\n  generateMimeTypeHeader() {\n    return '';\n  }\n\n  generateHeaders() {\n    let code = '';\n    this.params\n      .filter(param => param.in === 'headers')\n      .forEach(param => {\n        code += `$request->header(\"${param.name}\" => \"${param.value}\");\\n`;\n      });\n    return code;\n  }\n\n  generateQueryParams() {\n    let code = '';\n    this.params\n      .filter(param => param.in === 'query')\n      .forEach(param => {\n        code += `$url .= '?' if ($url !~ /\\\\?/);\\n`;\n        code += `$url .= '${param.name}=${param.value}&';\\n`;\n      });\n    return code;\n  }\n\n  generateJsonPostData() {\n    let code = '';\n    const postData = this.params.find(param => param.in === 'postData');\n    code += `$request->header('Content-Type' => 'application/json');\\n`;\n    code += `my $json = '${postData.value}';\\n`;\n    code += 'my $data = decode_json($json);\\n';\n    code += '$request->content($json);\\n';\n    return code;\n  }\n\n  generateMultipartPostData() {\n    let code = '';\n    const postData = this.params.find(param => param.in === 'postData');\n    code += '$request->header(\\'Content-Type\\' => \\'multipart/form-data\\');\\n';\n    code += `my $filename = '${postData.path}';\\n`;\n    code += 'open(my $fh, '<', $filename) or die \"Can\\'t open $filename: $!\";\\n';\n    code += 'binmode($fh);\\n';\n    code += 'my $data;\\n';\n    code += 'while(<$fh>) {\\n';\n    code += ' $data .= $_;\\n';\n    code += '}\\n';\n    code += 'close($fh);\\n';\n    code += '$request->content($data);\\n';\n    return code;\n  }\n\n  generateOtherPostData() {\n    let code = '';\n    const postData = this.params.find(param => param.in === 'postData');\n    code += '$request->header(\\'Content-Type\\' => \\'${this.mimeType}\\');\\n';\n    code += `my $data = '${postData.value}';\\n`;\n    code += '$request->content($data);\\n';\n    return code;\n  }\n\n  generateCookie() {\n    let code = '';\n    this.params\n      .filter(param => param.in === 'cookie')\n      .forEach(param => {\n        code += `$request->header('Cookie', '${param.name}=${param.value}');\\n`;\n      });\n    return code;\n  }\n}\n\nexport default PerlGenerator;\n","import JavaScriptXMLHttpRequestGenerator from \"./Stippets/JavaScriptXMLHttpRequestGenerator\";\nimport {Param} from \"./Stippets/_CodeGenerator\";\nimport JavaScriptAxiosGenerator from \"./Stippets/JavaScriptAxiosGenerator\";\nimport JavaScriptFetchGenerator from \"./Stippets/JavaScriptFetchGenerator\";\nimport JavaScriptJQueryGenerator from \"./Stippets/JavaScriptJQueryGenerator\";\nimport ShellCurlGenerator from \"./Stippets/ShellCurlGenerator\";\nimport ShellHttpieGenerator from \"./Stippets/ShellHttpieGenerator\";\nimport ShellWgetGenerator from \"./Stippets/ShellWgetGenerator\";\nimport Python3Generator from \"./Stippets/Python3Generator\";\nimport PythonRequestsGenerator from \"./Stippets/PythonRequestsGenerator\";\nimport GoGenerator from \"./Stippets/GoGenerator\";\nimport CGenerator from \"./Stippets/CGenerator\";\nimport OcamlGenerator from \"./Stippets/OcamlGenerator\";\nimport CSharpHttpClientGenerator from \"./Stippets/CSharpHttpclientGenerator\";\nimport CSharpRestSharpGenerator from \"./Stippets/CSharpRestSharpGenerator\";\nimport JavaAsyncHttpClientGenerator from \"./Stippets/JavaAsyncHttpClientGenerator\";\nimport JavaNetHttpClientGenerator from \"./Stippets/JavaNetHttpClientGenerator\";\nimport JavaOkHttpGenerator from \"./Stippets/JavaOkHttpGenerator\";\nimport HttpUrlStringGenerator from \"./Stippets/HttpUrlStringGenerator\";\nimport JavaUnirestGenerator from \"./Stippets/JavaUnirestGenerator\";\nimport ClojureGenerator from \"./Stippets/ClojureHttpGenerator\";\nimport KotlinGenerator from \"./Stippets/KotlinGenerator\";\nimport PhpCurlGenerator from \"./Stippets/PhpCurlGenerator\";\nimport PhpGuzzleGenerator from \"./Stippets/PhpGuzzleGenerator\";\nimport PowerShellWebRequestGenerator from \"./Stippets/PowerShellWebRequestGenerator\";\nimport PowerShellRestMethodGenerator from \"./Stippets/PowerShellRestMethodGenerator\";\nimport RGenerator from \"./Stippets/RGenerator\";\nimport RubyGenerator from \"./Stippets/RubyGenerator\";\nimport RustGenerator from \"./Stippets/RustGenerator\";\nimport SwiftGenerator from \"./Stippets/SwiftGenerator\";\nimport BrainfuckGenerator from \"./Stippets/BrainfuckGenerator\";\nimport ArduinoGenerator from \"./Stippets/ArduinoGenerator\";\nimport PhpHttp1Generator from \"./Stippets/PhpHttp1Generator\";\nimport PhpHttp2Generator from \"./Stippets/PhpHttp2Generator\";\nimport JavaScriptTypescriptGenerator from \"./Stippets/JavaScriptTypescriptGenerator\";\nimport ObjectCGenerator from \"./Stippets/ObjectCGenerator\";\nimport CppGenerator from \"./Stippets/CppGenerator\";\nimport DartGenerator from \"./Stippets/DartGenerator\";\nimport ScalaGenerator from \"./Stippets/ScalaGenerator\";\nimport LuaGenerator from \"./Stippets/LuaGenerator\";\nimport PerlGenerator from \"./Stippets/PerlGenerator\";\n\nexport class CodeGenerator {\n  _baseUrl = '';\n  _url = '';\n  _method = 'GET';\n  _params = [];\n  _mimeType = 'application/x-www-form-urlencoded';\n  _lang = 'javascript';\n  _library = 'xmlhttprequest';\n\n  constructor() {}\n\n  library(value) {\n    this._library = value;\n    return this;\n  }\n  lang(value) {\n    this._lang = value;\n    return this;\n  }\n  mimeType(value) {\n    this._mimeType = value;\n    return this;\n  }\n  params(value) {\n    this._params = value;\n    return this;\n  }\n  method(value) {\n    this._method = value;\n    return this;\n  }\n  url(value) {\n    value = value.startsWith('/') ? value.substring(1) : value\n    this._url = value;\n    return this;\n  }\n  baseUrl(value) {\n    if (!value.endsWith('/')) {\n      value += '/';\n    }\n    this._baseUrl = value;\n    return this;\n  }\n  convertParams() {\n    return {\n      baseUrl: this._baseUrl,\n      method: this._method,\n      mimeType: this._mimeType,\n      params: this._params,\n      url: this._url\n    }\n  }\n  convert() {\n    switch (this._lang) {\n      case 'shell':\n        switch (this._library) {\n          case 'curl':\n            return (new ShellCurlGenerator(this.convertParams())).generateCode();\n          case 'httpie':\n            return (new ShellHttpieGenerator(this.convertParams())).generateCode();\n          case 'wget':\n            return (new ShellWgetGenerator(this.convertParams())).generateCode();\n          default:\n            throw new Error('bad library')\n        }\n      case 'javascript':\n        switch (this._library) {\n          case 'xmlhttprequest':\n            return (new JavaScriptXMLHttpRequestGenerator(this.convertParams())).generateCode();\n          case 'jquery':\n            return (new JavaScriptJQueryGenerator(this.convertParams())).generateCode();\n          case 'fetch':\n            return (new JavaScriptFetchGenerator(this.convertParams())).generateCode();\n          case 'axios':\n            return (new JavaScriptAxiosGenerator(this.convertParams())).generateCode();\n          case 'typescript':\n            return (new JavaScriptTypescriptGenerator(this.convertParams())).generateCode();\n          default:\n            throw new Error('bad library')\n        }\n      case 'python':\n        switch (this._library) {\n          case 'python':\n            return (new Python3Generator(this.convertParams())).generateCode();\n          case 'requests':\n            return (new PythonRequestsGenerator(this.convertParams())).generateCode();\n          default:\n            throw new Error('bad library')\n        }\n      case 'go':\n        return (new GoGenerator(this.convertParams())).generateCode();\n      case 'c':\n        return (new CGenerator(this.convertParams())).generateCode();\n      case 'ocaml':\n        return (new OcamlGenerator(this.convertParams())).generateCode();\n      case 'csharp':\n        switch (this._library) {\n          case 'httpclient':\n            return (new CSharpHttpClientGenerator(this.convertParams())).generateCode();\n          case 'restsharp':\n            return (new CSharpRestSharpGenerator(this.convertParams())).generateCode();\n          default:\n            throw new Error('bad library')\n        }\n      case 'java':\n        switch (this._library) {\n          case 'asynchttp':\n            return (new JavaAsyncHttpClientGenerator(this.convertParams())).generateCode();\n          case 'nethttp':\n            return (new JavaNetHttpClientGenerator(this.convertParams())).generateCode();\n          case 'okhttp':\n            return (new JavaOkHttpGenerator(this.convertParams())).generateCode();\n          case 'unirest':\n            return (new JavaUnirestGenerator(this.convertParams())).generateCode();\n          default:\n            throw new Error('bad library')\n        }\n      case 'http':\n        return (new HttpUrlStringGenerator(this.convertParams())).generateCode();\n      case 'clojure':\n        return (new ClojureGenerator(this.convertParams())).generateCode();\n      case 'kotlin':\n        return (new KotlinGenerator(this.convertParams())).generateCode();\n      case 'php':\n        switch (this._library) {\n          case 'http1':\n            return (new PhpHttp1Generator(this.convertParams())).generateCode();\n          case 'http2':\n            return (new PhpHttp2Generator(this.convertParams())).generateCode();\n          case 'curl':\n            return (new PhpCurlGenerator(this.convertParams())).generateCode();\n          case 'guzzle':\n            return (new PhpGuzzleGenerator(this.convertParams())).generateCode();\n          default:\n            throw new Error('bad library')\n        }\n      case 'powershell':\n        switch (this._library) {\n          case 'webrequest':\n            return (new PowerShellWebRequestGenerator(this.convertParams())).generateCode();\n          case 'restmethod':\n            return (new PowerShellRestMethodGenerator(this.convertParams())).generateCode();\n          default:\n            throw new Error('bad library')\n        }\n      case 'r':\n        return (new RGenerator(this.convertParams())).generateCode();\n      case 'ruby':\n        return (new RubyGenerator(this.convertParams())).generateCode();\n      case 'rust':\n        return (new RustGenerator(this.convertParams())).generateCode();\n      case 'swift':\n        return (new SwiftGenerator(this.convertParams())).generateCode();\n      case 'objectivec':\n        return (new ObjectCGenerator(this.convertParams())).generateCode();\n      case 'cpp':\n        switch (this._library) {\n          case 'iostream':\n            return (new CppGenerator(this.convertParams())).generateCode();\n          case 'arduino':\n            return (new ArduinoGenerator(this.convertParams())).generateCode();\n          default:\n            throw new Error('bad library')\n        }\n      case 'dart':\n        return (new DartGenerator(this.convertParams())).generateCode();\n      case 'scala':\n        return (new ScalaGenerator(this.convertParams())).generateCode();\n      case 'lua':\n        return (new LuaGenerator(this.convertParams())).generateCode();\n      case 'perl':\n        return (new PerlGenerator(this.convertParams())).generateCode();\n      case 'brainfuck':\n        return (new BrainfuckGenerator(this.convertParams())).generateCode();\n      default:\n        throw new Error('bad lang')\n    }\n  }\n}\n\n","import mod from \"-!../../example/node_modules/babel-loader/lib/index.js??ref--2-0!../../example/node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../example/node_modules/vue-loader/lib/index.js??vue-loader-options!./CodeSimples.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../example/node_modules/babel-loader/lib/index.js??ref--2-0!../../example/node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../example/node_modules/vue-loader/lib/index.js??vue-loader-options!./CodeSimples.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./CodeSimples.vue?vue&type=template&id=f8cd87ea&\"\nimport script from \"./CodeSimples.vue?vue&type=script&lang=js&\"\nexport * from \"./CodeSimples.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./CodeSimples.vue?vue&type=style&index=0&id=f8cd87ea&prod&lang=css&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../example/node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"30966e41\"\n  \n)\n\nexport default component.exports","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../example/node_modules/css-loader/dist/cjs.js??ref--3-oneOf-1-1!../../example/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../example/node_modules/postcss-loader/dist/cjs.js??ref--3-oneOf-1-2!../../example/node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../example/node_modules/vue-loader/lib/index.js??vue-loader-options!./CodeView.vue?vue&type=style&index=0&id=8d539996&prod&lang=css&\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add CSS to SSR context\nvar add = require(\"!../../example/node_modules/vue-style-loader/lib/addStylesServer.js\").default\nmodule.exports.__inject__ = function (context) {\n  add(\"dead3f62\", content, true, context)\n};","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../example/node_modules/css-loader/dist/cjs.js??ref--3-oneOf-1-1!../../example/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../example/node_modules/postcss-loader/dist/cjs.js??ref--3-oneOf-1-2!../../example/node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../example/node_modules/vue-loader/lib/index.js??vue-loader-options!./CustomDropdownWithSubMenu.vue?vue&type=style&index=0&id=2fc26aab&prod&scoped=true&lang=css&\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add CSS to SSR context\nvar add = require(\"!../../example/node_modules/vue-style-loader/lib/addStylesServer.js\").default\nmodule.exports.__inject__ = function (context) {\n  add(\"6ebe6ba2\", content, true, context)\n};","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../example/node_modules/css-loader/dist/cjs.js??ref--3-oneOf-1-1!../../example/node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../example/node_modules/postcss-loader/dist/cjs.js??ref--3-oneOf-1-2!../../example/node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../example/node_modules/vue-loader/lib/index.js??vue-loader-options!./CodeSimples.vue?vue&type=style&index=0&id=f8cd87ea&prod&lang=css&\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add CSS to SSR context\nvar add = require(\"!../../example/node_modules/vue-style-loader/lib/addStylesServer.js\").default\nmodule.exports.__inject__ = function (context) {\n  add(\"ae8656f0\", content, true, context)\n};"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AAAA;AAAA;AAAA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AAAA;AAAA;AAAA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AALA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;ACjGA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AC/FA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;ACzGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AC9DA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;;AC3GA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AChFA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AC3EA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AC9HA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;ACtIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AC3GA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AC3HA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;ACtFA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AAEA;;ACnEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;ACpFA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;ACpEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;ACpGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;;ACzFA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;;AC3FA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;;AC9HA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;ACzFA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;ACllpGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;ACpFA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;ACzFA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;ACphHA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAEA;;AC9HA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;ACpIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;ACpHA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;;AC/EA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;AClHA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;;AC5GA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;ACnnhiDxNA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}